#!/bin/sh

NAME=build-package
CWD=$(pwd)
PREFIX="/appls"
TARGET="$(dpkg-architecture -qDEB_HOST_GNU_TYPE 2>/dev/null)"
DATA="/srv"
DBDATA="${DATA}/databases"
TMPSRV="/var/webservice"
HOST=$(hostname -f)

mysqlver=5.5.21
nginxver=1.1.16
phpver=5.2.17
monitver=5.3.2
eacceleratorver=0.9.6.1
postfixver=2.8.9
greyfixver=0.3.9
dovecotver=2.1.1
spfver=2.009
clamavver=0.97.3
clamsmtpver=1.10
pam_mysqlver=0.7RC1

mysqlurl="http://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-${mysqlver}.tar.gz/from/http://mysql.he.net/"
nginxurl="http://nginx.org/download/nginx-${nginxver}.tar.gz"
phpurl="http://us.php.net/get/php-${phpver}.tar.bz2/from/this/mirror"
moniturl="http://www.mmonit.com/monit/dist/monit-${monitver}.tar.gz"
eacceleratorurl="http://downloads.sourceforge.net/eaccelerator/eaccelerator-${eacceleratorver}.tar.bz2"
postfixurl="http://postfix.ezarticleinformation.com/official/postfix-${postfixver}.tar.gz"
greyfixurl="http://www.kim-minh.com/pub/greyfix/greyfix-${greyfixver}.tar.gz"
dovecoturl="http://dovecot.org/releases/2.1/dovecot-${dovecotver}.tar.gz"
spfurl="https://launchpad.net/postfix-policyd-spf-perl/trunk/${spfver}/+download/postfix-policyd-spf-perl-${spfver}.tar.gz"
clamavurl="http://downloads.sourceforge.net/project/clamav/clamav/${clamavver}/clamav-${clamavver}.tar.gz"
clamsmtpurl="http://thewalter.net/stef/software/clamsmtp/clamsmtp-${clamsmtpver}.tar.gz"
pam_mysqlurl="http://downloads.sourceforge.net/project/pam-mysql/pam-mysql/${pam_mysqlver}/pam_mysql-${pam_mysqlver}.tar.gz"

mysqldeps="build-essential cmake g++-4.4 intltool flex bison libreadline-dev libncurses5-dev libncursesw5-dev libbz2-dev zlib1g-dev libtool patch"
nginxdeps="build-essential bzip2 libpcre3-dev libpcrecpp0 libssl-dev libbz2-dev zlib1g-dev intltool libperl-dev libcurl3-gnutls"
monitdeps="build-essential intltool libssl-dev libpam0g-dev libbz2-dev zlib1g-dev"
postfixdeps="build-essential intltool libdb-dev libdb4.8-dev libsasl2-dev libsqlite3-dev libbz2-dev zlib1g-dev"
dovecotdeps="build-essential intltool libdb-dev libdb4.8-dev libldap2-dev libsasl2-dev libsqlite3-dev pkg-config libbz2-dev zlib1g-dev"
greyfixdeps="build-essential intltool libdb-dev libdb4.8-dev zlib1g-dev"
phpdeps="build-essential libmhash-dev libxml2-dev \
libfontconfig1-dev libfreetype6-dev libgd2-noxpm-dev \
libpng12-dev unixodbc-dev libsqlite3-dev libsqlite0-dev \
libdb-dev libdb4.8-dev libcurl4-openssl-dev libcurl3 libbz2-dev \
libc-client2007e-dev libevent-dev libexpat1-dev libjpeg62-dev \
libkrb5-dev libldap2-dev libmcrypt-dev libpspell-dev libpthread-stubs0-dev \
libsasl2-dev libtidy-dev re2c zlib1g-dev patch bzip2"

PACKAGES="monit nginx mysql pam_mysql php eaccelerator clamav clamsmtp postfix dovecot greyfix spf"

export buildall=0
export triggeroff=0

# display usage
usage()
{
 cat << EOF
Usage: $0 options

  OPTIONS:
   --help              display this message.
   --build=[pkgname]   build specific package.
   --dont-trigger      disable trigger build, need it by some packages.
   --all               build all available packages.

  EXAMPLE:
   $0 --build=mysql (build mysql package)
   or
   $0 --all (build all packages available)

  AVAILABLE PACKAGES:
   packages: $PACKAGES

EOF
}

# display info, warning and error message
msg()
{
 local type=$1
 local message=$2
 case "$type" in
   info)
    echo "msg() info: $message" ;;
   warn)
    echo "msg() warn: $message" ;;
   error)
    echo "msg() error: $message" ;;
   *)
    echo 'msg(): missing arguments, usage: "error some message"' ;;
 esac
}

# download package (using apt-get)
get_package()
{
 local uid=$(id -u)
 local args=$1
 local cmd="apt-get install -qq -f -y ${args}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi
 msg info "Installing missing package: ${args}"
 ${cmd} > /dev/null 2>&1 || { msg error "Failed to run command: ${cmd}"; exit 1; }
}

# resolve dependencies for packages
get_dependency()
{
 local name=$1
 local dlocal="${name}deps"
 local deps="${!dlocal}"
 local uid=$(id -u)
 local cmd="apt-get install -q -f -y ${deps}"
 local logdir="$CWD/log"
 local logfile="${logdir}/${name}-dependencies.log"

 [ -d ${logdir} ] || mkdir -p ${logdir}
 [ -e ${logfile} ] && rm -f ${logfile} || :

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi
 msg info "Installing required dependencies for ${name}"
 msg warn "*** (for more information please check ${logfile}) ***"
 sleep 1
 ${cmd} > ${logfile} 2>&1 || { msg error "Failed to install dependecies for ${name}"; exit 1; }
}

# set build c/c++ flags
set_cflags()
{
 local arch="$(uname -m)"

 if [ "${arch}" = "x86_64" ]; then
    CFLAGS="-m64 -O2 -fPIC -pipe -fomit-frame-pointer"
    CXXFLAGS="$CFLAGS"
    LIBSUFFIX="64"
 else
    CFLAGS="-m32 -O2 -march=i486 -mtune=i686 -pipe -fomit-frame-pointer"
    CXXFLAGS="$CFLAGS"
    LIBSUFFIX=""
 fi
 msg info "Running ${arch} architecture, using compiler flags: $CFLAGS"
 export CFLAGS
 export CXXFLAGS
 export LIBSUFFIX
}

# download package source
do_wget()
{
 local url=$1
 local src=$2
 local cwd=${CWD}
 local srcdir=${cwd}/sources

 [ -d ${srcdir} ] || mkdir -p ${srcdir}

 if [ ! -x /usr/bin/wget ]; then
    get_package wget
 fi

 if [ ! -e ${srcdir}/${src} ]; then
    msg info "Fetching ${src} from ${url} ..."
    /usr/bin/wget --no-check-certificate "${url}" -O "${srcdir}/${src}" >/dev/null 2>&1 || { msg error "Failed to download ${src} from ${url}."; exit 1; }
 else
    msg warn "Tarball ${src} already exists."
 fi
}

# unpack package source
do_unpack()
{
 local tarname=$1
 local cwd=${CWD}
 local srcdir=${cwd}/sources

 if [ ! -e ${srcdir}/${tarname} ]; then
    msg error "${tarname}: not found."
 else
    msg info "Unpacking ${srcdir}/${tarname} in $(pwd) ..."
    tar -xf ${srcdir}/${tarname} >/dev/null 2>&1 || { msg error "Failed to unpack ${tarname}, make sure that the tarball is not broken."; exit 1; }
 fi
}

get_patch()
{
 local url=$1
 local patchname=$2
 local patchdir="$CWD/patch"
 local patchfile="${patchdir}/${patchname}"

 [ -d ${patchdir} ] || mkdir -p ${patchdir}

 if [ ! -x /usr/bin/wget ]; then
    get_package wget
 fi

 if [ ! -e ${patchfile} ]; then
    /usr/bin/wget ${url}/${patchname} -O ${patchfile} >/dev/null 2>&1 || { msg error "Failed to download patch ${patchname} from ${url}."; exit 1; }
 else
   msg warn "Patch ${patchname} wont be downloaded, already exists."
 fi
}

do_configure()
{
 local name=$1
 local args=$2
 local cwd=$(pwd)
 local logdir=$CWD/log
 local logfile=${logdir}/${name}-configure.log

 [ -d ${logdir} ] || mkdir -p ${logdir}
 [ -e ${logfile} ] && rm -f ${logfile}

 msg info "Configuring ${name} ..."
 msg info "Logfile saved in ${logfile}"
 if [ "${name}" != "mysql" -a "${name}" != "nginx" -a "${name}" != "postfix" ]; then
   set_cflags
   ./configure \
      --prefix="${PREFIX}/${name}" \
      --sysconfdir="${PREFIX}/${name}/conf" \
      --bindir="${PREFIX}/${name}/bin" \
      --sbindir="${PREFIX}/${name}/sbin" \
      --libdir="${PREFIX}/${name}/lib${LIBSUFFIX}" \
      --target="${TARGET}" \
      --host="${TARGET}" \
      --build="${TARGET}" ${args} > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 elif [ "${name}" = "nginx" ]; then
   set_cflags
   ./configure \
      --prefix="${PREFIX}/${name}" \
      --conf-path="${PREFIX}/${name}/conf/nginx.conf" \
      --http-log-path="/var/log/${name}/access.log" \
      --error-log-path="/var/log/${name}/error.log" \
      --http-fastcgi-temp-path="${TMPSRV}/${name}/fastcgi" \
      --http-client-body-temp-path="${TMPSRV}/${name}/client" \
      --http-proxy-temp-path="${TMPSRV}/${name}/proxy" \
      --pid-path="/var/run/${name}.pid" ${args} > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 elif [ "${name}" = "mysql" ]; then
   mkdir -p ${cwd}/build
   cd ${cwd}/build
   set_cflags
   cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="${PREFIX}/${name}" \
    -DINSTALL_MYSQLDATADIR="${DBDATA}/${name}" \
    -DSYSCONFDIR="${PREFIX}/${name}/conf" \
    ${args} .. > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 elif [ "${name}" = "postfix" ]; then
   set_cflags
   make makefiles \
    DEBUG='' \
    CCARGS=' \
     -DDEF_CONFIG_DIR=\"/appls/postfix/conf\" \
     -DUSE_TLS -DUSE_SASL_AUTH -DHAS_SSL -DHAS_MYSQL -DUSE_CYRUS -DHAS_SQLITE \
     -DUSE_CYRUS_SASL -I/usr/include/sasl \
     -DHAS_MYSQL -I/appls/mysql/include \
     -DHAS_SQLITE' \
    AUXLIBS=' \
     -L/usr/lib -L/usr/lib/ssl/engines -L/appls/mysql/lib  \
     -Wl,-rpath /appls/mysql/lib -Wl,-rpath /usr/lib \
     -Wl,-rpath /usr/lib/ssl/engines \
     -lsasl2 \
     -lssl -lcrypto \
     -lmysqlclient -lz -lm \
     -lsqlite3 -lpthread' \
    OPT="${CFLAGS}" > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 fi
}

run_make()
{
 local CPUs=$(grep MHz /proc/cpuinfo | wc -l)
 local name=$1
 local logdir=$CWD/log
 local logfile=${logdir}/${name}-build.log

 [ -d ${logdir} ] || mkdir -p ${logdir}
 [ -e ${logfile} ] && rm -f ${logfile}

 msg info "Logfile saved in ${logfile}"
 msg info "Building ${name} ( make -j${CPUs} )"
 make -j"${CPUs}" > ${logfile} 2>&1 || { msg error "Failed to build source."; exit 1; }

 if [ "${name}" != "postfix" ]; then
    msg info "Installing ${name} ( make install )"
    make install > ${logfile} 2>&1 || { msg error "Failed to install binary."; exit 1; }
 else
    msg info "Installing ${name} ( sh ./postfix-install -non-interactive )"
    sh ./postfix-install -non-interactive \
      install_root="${PREFIX}/${name}" \
      config_directory="/conf" \
      command_directory="/sbin" \
      daemon_directory="/libexec" \
      sample_directory="/sample" \
      html_directory="/html" \
      readme_directory="/doc" \
      mail_owner="postfix" \
      setgid_group="postdrop" \
      manpage_directory="/man" > ${logfile} 2>&1 || { msg error "Failed to install binary."; exit 1; }
 fi
}

chown_dir()
{
 local dir=$1
 local uid=$(id -u)
 local cmd="chown root.root -R ${dir}"

 if [ $uid -ne 0 ]; then
   cmd="sudo $cmd"
 fi

 $cmd >/dev/null 2>&1
 if [ $? -ne 0 ]; then
    msg warn "Failed to change ownership of directory ${dir}"
 fi
}

strip_binary()
{
 local dir=$1
 msg info "Stripping binaries ..."
 if [ -d ${dir} ]; then
    find $dir | xargs file | grep -e "executable" -e "shared object" | grep ELF \
       | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
 else
    msg warn "Failed to strip ${dir} ..."
 fi
}

strip_file()
{
 local file=$1
 msg info "Stripping binary(s) ..."
 if [ -e ${file} ]; then
    strip --strip-unneeded ${file} 2> /dev/null || true
 else
    msg warn "Failed to strip ${file} ..."
 fi
}

create_user()
{
 # example: create_user www 10100 "Web User" /home/www
 local user=$1 # username
 local uid=$2  # uniq id
 local name=$3 # username geos
 local home=$4 # username home
 local cmd=
 local uid=$(id -u)

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 if ! getent group ${user} >/dev/null 2>&1; then
     msg info "Creating group ${user} ..."
     ${cmd} groupadd -g ${uid} ${user} || { msg error "Failed to create group ${user}."; exit 1; }
 fi
 if ! getent passwd ${user} >/dev/null 2>&1; then
     msg info "Creating user ${user} ..."
     ${cmd} useradd -c "${name}" -u ${uid} -l -g ${uid} -M -s /bin/false -d ${home} -r ${user} || { msg error "Failed to create user ${user}."; exit 1; }
 fi

 ${cmd} /usr/sbin/pwck -s 2>/dev/null || msg error "Failed to sort /etc/passwd."
 ${cmd} /usr/sbin/grpck -s 2>/dev/null || msg error "Failed to sort /etc/group."
}

trigger()
{
 local name=$1
 if [ $triggeroff -ne 1 ]; then
  if [ -n ${name} ]; then
     sleep 2
     msg info "Triggered build (re-build) of ${name} ..."
     build_${name} 2>/dev/null || msg error "Failed to build (re-build) ${name}."
  else
     msg warn "Nothing triggered ..."
  fi
 else
  msg warn "Trigger is disabled, ${name} wont be build (re-build)."
 fi
}

stop_server()
{
 local name=$1
 if [ -e /etc/init.d/${name} ]; then
     msg info "Shutting down ${name} ..."
     sh /etc/init.d/${name} stop >/dev/null 2>&1 || msg error "Failed to shutdown ${name}."
 else
     msg warn "Initscript for ${name} not found."
 fi
}

start_server()
{
 local name=$1
 if [ -e /etc/init.d/${name} ]; then
     msg info "Starting up ${name} ..."
     sh /etc/init.d/${name} start >/dev/null 2>&1 || msg error "Failed to start ${name}."
 else
     msg warn "Initscript for ${name} not found."
 fi
}

need_mysql()
{
 local name=$1
 if [ ! -x ${PREFIX}/mysql/bin/mysql ]; then
   msg info "MySQL is not available, we need it before building ${name}"
   trigger mysql
 fi
}

build_mysql()
{
 local name="mysql"
 local version="${mysqlver}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${mysqlurl}"
 local logdir="${DBDATA}/log"
 local dbdir="${DBDATA}/${name}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 get_dependency ${name}

 do_wget ${url} ${tarball}
 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 # cat $CWD/patch/dont-build-examples-and-tests.patch | patch -p1 || { msg error "Failed to apply patch."; exit 1; }

 do_configure ${name} \
 "-DDEFAULT_CHARSET=utf8 \
  -DDEFAULT_COLLATION=utf8_general_ci \
  -DWITH_EXTRA_CHARSETS=complex \
  -DWITH_EMBEDDED_SERVER=ON \
  -DWITH_INNOBASE_STORAGE_ENGINE=1 \
  -DWITH_PARTITION_STORAGE_ENGINE=1 \
  -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \
  -DWITHOUT_ARCHIVE_STORAGE_ENGINE=1 \
  -DWITHOUT_BLACKHOLE_STORAGE_ENGINE=1 \
  -DWITHOUT_FEDERATED_STORAGE_ENGINE=1 \
  -DMYSQL_MAINTAINER_MODE=OFF \
  -DWITH_DEBUG=OFF \
  -DWITH_PERFSCHEMA_STORAGE_ENGINE=OFF \
  -DWITH_UNIT_TESTS=OFF \
  -DENABLED_PROFILING=ON \
  -DWITH_READLINE=ON \
  -DWITH_ZLIB=system \
  -DWITH_SSL=system \
  -DWITH_LIBWRAP=OFF \
  -DMYSQL_DATADIR=${DBDATA}/${name} \
  -DMYSQL_UNIX_ADDR=${TMPSRV}/mysql.sock \
  -DFEATURE_SET=community \
  -DCOMPILATION_COMMENT='MySQL Community Server' \
  -DMANUFACTURER=$HOST"

 run_make ${name}
 strip_binary ${PREFIX}/${name}
 create_user mysql 10101 "MySQL Server" /srv/databases/mysql

 [ -d ${dbdir} ] || mkdir -p -m 0770 ${dbdir}
 chown mysql.mysql ${dbdir}
 [ -d ${logdir} ] || mkdir -p -m 0770 ${logdir}
 chown mysql.mysql ${logdir}

 echo "${PREFIX}/${name}/lib" > /etc/ld.so.conf.d/mysql.conf

 ln -sf ${PREFIX}/${name}/bin/mysql_config /usr/bin/mysql_config

 if [ -x /sbin/ldconfig ]; then
    /sbin/ldconfig
    sleep 5
 fi

 if [ ${buildall} -eq 0 ]; then
    # trigger pam_mysql
    trigger dovecot
    # trigger postfix
    # trigger php
 fi

 cd $CWD
}

build_nginx()
{
 local name="nginx"
 local version="${nginxver}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${nginxurl}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 get_dependency ${name}

 do_wget ${url} ${tarball}
 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} \
 "--with-http_ssl_module \
  --with-http_realip_module \
  --with-http_addition_module \
  --with-http_flv_module \
  --with-http_gzip_static_module \
  --with-http_sub_module \
  --with-http_perl_module \
  --with-file-aio \
  --without-http_uwsgi_module \
  --without-http_scgi_module \
  --with-ipv6 \
  --without-http_uwsgi_module \
  --without-http_scgi_module \
  --without-http_memcached_module \
  --without-http_geo_module \
  --without-mail_pop3_module \
  --without-mail_imap_module \
  --without-mail_smtp_module"

 run_make ${name}
 strip_binary ${PREFIX}/${name}
 create_user www 10100 "Nginx Web Server" /srv/www

 cd $CWD
}

build_php()
{
 local name="php"
 local version="${phpver}"
 local tarball="${name}-${version}.tar.bz2"
 local dir="${name}-${version}"
 local url="${phpurl}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 # we need to make sure mysql is already installed.
 need_mysql

 get_dependency ${name}

 do_wget ${url} ${tarball}
 get_patch http://download.suhosin.org suhosin-patch-5.2.16-0.9.7.patch.gz

 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 zcat $CWD/patch/suhosin-patch-5.2.16-0.9.7.patch.gz | patch -p1 || { msg error "Failed to apply patch."; exit 1; }

 do_configure ${name} \
 "--enable-inline-optimization \
  --enable-discard-path \
  --enable-fastcgi \
  --enable-force-cgi-redirect \
  --enable-sqlite-utf8 \
  --enable-bcmath \
  --enable-calendar \
  --with-curl \
  --enable-exif \
  --enable-ftp \
  --with-gd \
  --with-gettext \
  --with-iconv \
  --enable-mbstring \
  --enable-mbregex \
  --with-mcrypt \
  --with-mhash \
  --with-openssl \
  --with-xsl \
  --enable-sockets \
  --enable-gd-native-ttf \
  --with-zlib \
  --enable-zip \
  --enable-pcntl \
  --enable-magic-quotes \
  --with-tidy \
  --with-bz2 \
  --enable-shmop \
  --with-mm \
  --enable-mbstring=all \
  --disable-debug \
  --enable-sysvshm \
  --enable-sysvsem \
  --with-readline \
  --with-config-file-path=${PREFIX}/${name}/conf \
  --with-freetype-dir=/usr \
  --with-jpeg-dir=/usr \
  --with-mysql-sock=${TMPSRV}/mysql.sock \
  --with-mysql=${PREFIX}/mysql \
  --with-mysqli=${PREFIX}/mysql/bin/mysql_config \
  --with-pdo-mysql=${PREFIX}/mysql"

 stop_server php-fastcgi

 run_make ${name}
 strip_binary ${PREFIX}/${name}

 if [ ${buildall} -eq 0 ]; then
    trigger eaccelerator
 fi

 start_server php-fastcgi

 cd $CWD
}

build_monit()
{
 local name="monit"
 local version="${monitver}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${moniturl}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 get_dependency ${name}

 do_wget ${url} ${tarball}
 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} \
 "--program-prefix= \
  --program-suffix= \
  --enable-optimized"

 run_make ${name}
 strip_binary ${PREFIX}/${name}

 [ -d /var/run/${name} ] || mkdir -p -m 0750 /var/run/${name}
 [ -d ${PREFIX}/${name}/conf ] || mkdir -p -m 0750 ${PREFIX}/${name}/conf

 cd $CWD
}

build_eaccelerator()
{
 local name="eaccelerator"
 local version="${eacceleratorver}"
 local tarball="${name}-${version}.tar.bz2"
 local dir="${name}-${version}"
 local url="${eacceleratorurl}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 do_wget ${url} ${tarball}
 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 export PATH="${PREFIX}/php/bin:$PATH"
 phpize

 do_configure ${name} "--enable-eaccelerator=shared"

 run_make ${name}
 strip_binary ${PREFIX}/php

 cd $CWD
}

build_postfix()
{
 local name="postfix"
 local version="${postfixver}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${postfixurl}"
 local queue="/var/spool/${name}"
 local lib="/var/lib/${name}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 do_wget ${url} ${tarball}
 get_patch http://vda.sourceforge.net/VDA postfix-vda-v10-2.8.8.patch

 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 cat $CWD/patch/postfix-vda-v10-2.8.8.patch | patch -p1 || { msg error "Failed to apply patch."; exit 1; }

 do_configure ${name}

 if ! getent group postdrop >/dev/null 2>&1; then
    groupadd -g 10102 postdrop
 fi
 create_user postfix 10103 "Postfix Mail Server" /var/spool/postfix

 stop_server ${name}

 run_make ${name}
 strip_binary ${PREFIX}/${name}

 [ -d ${lib} ] || mkdir -p ${lib}
 [ -d ${queue} ] || mkdir -p ${queue}

 for dir in active bounce corrupt defer deferred flush \
   hold incoming maildrop pid private public saved trace; do
     mkdir -p ${queue}/${dir}
 done
 for dir in active bounce corrupt defer deferred flush \
   hold incoming private public maildrop trace saved; do
     chown postfix ${queue}/${dir}
 done
 chgrp postdrop ${queue}/public ${queue}/maildrop
 chgrp postdrop ${PREFIX}/${name}/sbin/postqueue ${PREFIX}/${name}/sbin/postdrop
 chmod 0770 ${queue}/maildrop
 chmod g+s ${PREFIX}/${name}/sbin/postqueue ${PREFIX}/${name}/sbin/postdrop
 chown postfix ${lib}
 chmod 0755 ${lib}

 ( cd ${PREFIX}/${name}
   mv usr/sbin/sendmail sbin
 )
 mkdir -p ${PREFIX}/${name}/bin
 ( cd ${PREFIX}/${name}/bin
   ln -sf ../sbin/sendmail newaliases
   ln -sf ../sbin/sendmail mailq
 )
 rm -fr ${PREFIX}/${name}/{usr,var}

 for bin in ${PREFIX}/${name}/sbin/* ; do
    ln -sf ${PREFIX}/${name}/sbin/$(basename $bin) /usr/sbin/$(basename $bin)
 done
 ln -sf ${PREFIX}/${name}/sbin/sendmail /usr/bin/newaliases
 ln -sf ${PREFIX}/${name}/sbin/sendmail /usr/bin/mailq
 ln -sf ${PREFIX}/${name}/sbin/sendmail /usr/lib/sendmail
 ln -sf ${PREFIX}/${name}/conf /etc/postfix

 start_server ${name}

 cd $CWD
}

build_greyfix()
{
 local name="greyfix"
 local version="${greyfixver}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${greyfixurl}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 do_wget ${url} ${tarball}
 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} "--disable-dependency-tracking"

 run_make ${name}
 strip_binary ${PREFIX}/${name}

 rm -fr ${PREFIX}/${name}/var
 mkdir -p /var/lib/${name}
 chown nobody -R /var/lib/${name}
 chmod 0750 /var/lib/${name}

 cd $CWD
}

build_dovecot()
{
 local name="dovecot"
 local version="${dovecotver}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${dovecoturl}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 do_wget ${url} ${tarball}
 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} \
 "--with-shadow \
  --with-pam \
  --with-mysql \
  --with-ssl=openssl \
  --with-ssldir=${PREFIX}/${name}/ssl \
  --with-rundir=/var/run/dovecot \
  --without-docs \
  --with-sql \
  --with-gssapi=yes \
  --with-notify=inotify \
  --with-ioloop=epoll \
  --with-mem-align=32 \
  --with-zlib"

 run_make ${name}
 strip_binary ${PREFIX}/${name}

 create_user dovecot 10104 "Dovecot IMAP Server" ${PREFIX}/${name}
 create_user dovenull 10105 "Dovecot Null User" ${PREFIX}/${name}
 create_user vmail 10106 "Virtual Mailbox" ${DATA}/mail/vmail
 usermod -a -G mail vmail
 usermod -a -G postfix vmail

 if ! getent passwd spamfilter >/dev/null 2>&1; then
     useradd -c "SpamAssassin User" -u 10107 -l -g nogroup -m -s /bin/bash -r spamfilter || { msg error "Failed to create user ${user}."; exit 1; }
 fi

 mkdir -p ${PREFIX}/${name}/conf/${name}
 mkdir -p /var/run/${name}
 mkdir -p ${DATA}/mail/vmail
 chown -R vmail ${DATA}/mail/vmail
 chmod 0770 ${DATA}/mail/vmail

 cd $CWD
}

build_clamav()
{
 local name="clamav"
 local version="${clamavver}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${clamavurl}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 do_wget ${url} ${tarball}
 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 create_user clamav 10108 "ClamAV Antivirus User" ${PREFIX}/${name}

 do_configure ${name} \
 "--with-user=clamav \
  --with-group=clamav \
  --with-dbdir=/var/lib/${name} \
  --enable-dns-fix \
  --program-prefix= \
  --program-suffix="

 run_make ${name}
 strip_binary ${PREFIX}/${name}

 mkdir -p -m 0755 /var/lib/${name}
 chown clamav.root /var/lib/${name} || { msg error "Failed to change /var/lib/${name} directory ownership."; exit 1; }

 mkdir -p -m 0750 /var/log/${name}
 chown clamav.root /var/log/${name} || { msg error "Failed to change /var/log/${name} directory ownership."; exit 1; }

 mkdir -p -m 0750 ${PREFIX}/${name}/run
 chown clamav.root ${PREFIX}/${name}/run || { msg error "Failed to change ${PREFIX}/${name}/run directory ownership."; exit 1; }

 cd $CWD
}

build_clamsmtp()
{
 local name="clamsmtp"
 local version="${clamsmtpver}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${clamsmtpurl}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 do_wget ${url} ${tarball}
 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 cat $CWD/patch/use_mkstemp.patch | patch -p1 || { msg error "Failed to apply patch."; exit 1; }

 do_configure ${name} "--disable-dependency-tracking"

 run_make ${name}
 strip_binary ${PREFIX}/${name}

 mkdir -p ${PREFIX}/${name}/conf
 mkdir -p -m 0750 ${PREFIX}/${name}/run
 chown clamav ${PREFIX}/${name}/run

 cd $CWD
}

build_pam_mysql()
{
 local name="pam_mysql"
 local version="${pam_mysqlver}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${pam_mysqlurl}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 do_wget ${url} ${tarball}
 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} \
 "--with-openssl \
  --with-cyrus-sasl=/usr \
  --with-pam=/usr \
  --with-mysql=${PREFIX}/mysql"

 run_make ${name}
 strip_file /lib/security/${name}.so

 cd $CWD
}

build_spf()
{
 local name="postfix-policyd-spf-perl"
 local version="${spfver}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${spfurl}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir}

 do_wget ${url} ${tarball}
 do_unpack ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 mkdir -p ${PREFIX}/postfix/scripts
 msg info "Install ${name} in ${PREFIX}/postfix/scripts ..."
 install -m755 postfix-policyd-spf-perl \
   ${PREFIX}/postfix/scripts >/dev/null 2>&1 || { msg error "Failed to install ${name}."; exit1; }
 get_package libmail-spf-perl

 cd $CWD
}

build_all()
{
 export buildall=1
 for name in $PACKAGES; do
    msg info "Building : build_${name}"
    build_${name}
 done
}

control_c()
{
 echo
 msg warn "Ctrl+C was press, we are existing..."
 exit $?
}

OPT="$@"
if [ -z "${OPT}" ]; then
   msg error "No arguments supplied." 1>&2
   usage
   exit 1
fi

buildpkg=0

trap control_c SIGINT

while [ $# -gt 0 ]; do
 case "$1" in
  --dont-trigger)
     export triggeroff=1
     shift
  ;;

  --build*)
     if [ "$1" != "${1##--build=}" ]; then
        name="${1##--build=}"
     else
        name=$2
        shift
     fi
     buildpkg=1
  ;;

  --all)
     msg warn "Building all available packages ($(echo $PACKAGES | sed 's/ /, /g'))"
     msg warn "This option will build all packages and it can take up to several hours"
     msg warn "to finish depending on the speed of your server."
     msg warn "If you are not sure what you are doing, just press now Ctrl+C to stop or"
     msg warn "Enter to continue with package build."
     read key
     # build_all
  ;;

  --help)
    usage
    exit 0
  ;;

  *)
    msg error "Missing arguments."
    usage
    ;;
 esac
 shift
done

if [ $buildpkg -eq 1 ]; then
   if [ -z "$name" ]; then
      msg error "Missing arguments, can not build package."
      exit 1
   else
      pkg=$(echo $PACKAGES | grep -w ${name} 2>/dev/null)
      if [ -z "$pkg" ]; then
         msg error "$name package is not available at this moment."
         msg info "available packages are: $(echo $PACKAGES | sed 's/ /, /g')"
         exit 1
      else
         msg info "Building now package: $name"
         build_${name}
      fi
   fi
fi

exit 0
