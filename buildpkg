#!/bin/bash

NAME=buildpkg
VERSION=1.0.1
CWD=$(pwd)

# Do not modify this, this are the only supported applications.
PACKAGES="mysql nginx php monit eaccelerator postfix greyfix dovecot spf clamav clamsmtp pam_mysql"

mysqldeps="build-essential cmake g++-4.4 intltool flex bison libtool libreadline-dev libncurses5-dev libncursesw5-dev libbz2-dev zlib1g-dev libtool patch libssl-dev"
nginxdeps="build-essential bzip2 libpcre3-dev libpcrecpp0 libssl-dev libbz2-dev zlib1g-dev intltool libperl-dev libcurl3-gnutls"
phpdeps="build-essential libtool libltdl7 libmhash-dev libxml2-dev \
libfontconfig1-dev libfreetype6-dev libgd2-noxpm-dev libmm-dev \
libpng12-dev unixodbc-dev libsqlite3-dev libsqlite0-dev libxslt1-dev \
libdb-dev libcurl4-openssl-dev libcurl3 libbz2-dev libjpeg-dev \
libc-client2007e-dev libevent-dev libexpat1-dev libxslt1-dev \
libkrb5-dev libldap2-dev libmcrypt-dev libpspell-dev libpthread-stubs0-dev \
libsasl2-dev libtidy-dev re2c zlib1g-dev patch bzip2"
monitdeps="build-essential intltool libssl-dev libpam0g-dev libbz2-dev zlib1g-dev"
postfixdeps="build-essential intltool libdb-dev libsasl2-dev libsqlite3-dev libbz2-dev zlib1g-dev libssl-dev libpcre3-dev patch"
greyfixdeps="build-essential intltool libdb-dev zlib1g-dev"
dovecotdeps="build-essential intltool libtool libdb-dev libldap2-dev libsasl2-dev libsqlite3-dev pkg-config libbz2-dev zlib1g-dev libssl-dev"
spfdeps="perl libmail-sendmail-perl libsys-hostname-long-perl"
clamavdeps="build-essential libgcc1 intltool libtool libltdl7 libmail-sendmail-perl libmilter-dev libmilter1.0.1 libsys-hostname-long-perl libtommath-dev libtommath0 zlib1g-dev libbz2-dev"
clamsmtpdeps="build-essential libmail-sendmail-perl libsys-hostname-long-perl"

export buildall=0
export triggeroff=0

# display usage
usage()
{
 cat << EOF
$NAME script $VERSION
Report bugs at <robert@linux-source.org>

Usage: $NAME [options...]

  OPTIONS:
    --help              display this message.
    --pkg=package       build specific package.
    --dont-trigger      disable trigger (re)build of packages (use only with --pkg=package).
    --all               build all available packages.

  EXAMPLE:
    $NAME --pkg=mysql (build mysql package)
      or
    $NAME --all (build all packages available)

  AVAILABLE PACKAGES:
    $PACKAGES

EOF
}

# display info, warning or error message
msg()
{
 local type=$1
 local message=$2
 case "$type" in
   info)
    echo "$NAME: info: $message" ;;
   warn)
    echo "$NAME: warn: $message" ;;
   error)
    echo "$NAME: error: $message" ;;
   *)
    echo '$NAME: missing arguments, usage: "error some message"' ;;
 esac
}

# setup global variables
set_global_conf()
{
 local config_file=

 if [ -s /etc/buildpkg.conf ]; then
    source /etc/buildpkg.conf
    config_file=/etc/buildpkg.conf
 elif [ -s $CWD/buildpkg.conf ]; then
    source $CWD/buildpkg.conf
    config_file=$CWD/buildpkg.conf
 elif [ -s $CWD/.buildpkg.conf ]; then
    source $CWD/.buildpkg.conf
    config_file=$CWD/.buildpkg.conf
 else
    usage
    msg error "unable to find a configuration file."
    msg error "im looking for: /etc/$NAME.conf or ~/$NAME.conf or ~/.$NAME.conf"
    exit 1
 fi

 [ -z "$PREFIX" ] && PREFIX=/appls
 [ -z "$DATA" ] && DATA=/srv
 [ -z "$MYDB" ] && MYDB=/srv/databases
 [ -z "$TMPSRV" ] && TMPSRV=/var/webservice
 [ -z "$HOST" ] && HOST="$(hostname -f)"

 [ -z "$MYSQL_VERSION" ] && { msg error "MYSQL_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$NGINX_VERSION" ] && { msg error "NGINX_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$PHP_VERSION" ] && { msg error "PHP_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$EACCELERATOR_VERSION" ] && { msg error "EACCELERATOR_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$MONIT_VERSION" ] && { msg error "MONIT_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$POSTFIX_VERSION" ] && { msg error "POSTFIX_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$GREYFIX_VERSION" ] && { msg error "GREYFIX_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$DOVECOT_VERSION" ] && { msg error "DOVECOT_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$SPF_VERSION" ] && { msg error "SPF_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$CLAMAV_VERSION" ] && { msg error "CLAMAV_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$CLAMSMTP_VERSION" ] && { msg error "CLAMSMTP_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$PAM_MYSQL_VERSION" ] && { msg error "PAM_MYSQL_VERSION cant be empty. Please set value in $config_file."; exit 1; }

 MYSQL_URL="http://ftp.gwdg.de/pub/misc/mysql/Downloads/MySQL-5.5/mysql-${MYSQL_VERSION}.tar.gz"
 NGINX_URL="http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz"
 PHP_URL="http://www.php.net/distributions/php-${PHP_VERSION}.tar.bz2"
 EACCELERATOR_URL="http://downloads.sourceforge.net/eaccelerator/eaccelerator-${EACCELERATOR_VERSION}.tar.bz2"
 MONIT_URL="http://www.mmonit.com/monit/dist/monit-${MONIT_VERSION}.tar.gz"
 POSTFIX_URL="ftp://ftp.its.cz/MIRRORS/ftp.porcupine.org/mirrors/postfix-release/official/postfix-${POSTFIX_VERSION}.tar.gz"
 GREYFIX_URL="http://www.kim-minh.com/pub/greyfix/greyfix-${GREYFIX_VERSION}.tar.gz"
 DOVECOT_URL="http://dovecot.org/releases/2.1/dovecot-${DOVECOT_VERSION}.tar.gz"
 SPF_URL="https://launchpad.net/postfix-policyd-spf-perl/trunk/${SPF_VERSION}/+download/postfix-policyd-spf-perl-${SPF_VERSION}.tar.gz"
 CLAMAV_URL="http://downloads.sourceforge.net/project/clamav/clamav/${CLAMAV_VERSION}/clamav-${CLAMAV_VERSION}.tar.gz"
 CLAMSMTP_URL="http://thewalter.net/stef/software/clamsmtp/clamsmtp-${CLAMSMTP_VERSION}.tar.gz"
 PAM_MYSQL_URL="http://downloads.sourceforge.net/project/pam-mysql/pam-mysql/${PAM_MYSQL_VERSION}/pam_mysql-${PAM_MYSQL_VERSION}.tar.gz"

 if [ -z "$MAKEJOBS" ]; then
    MAKEJOBS="$(grep MHz /proc/cpuinfo 2>/dev/null | wc -l)"
 fi
 if [ "$(uname -m)" = "x86_64" ]; then
    ARCH="x86_64"
 else
    ARCH="i386"
 fi

 if [ -x /usr/bin/dpkg-architecture ]; then
    TARGET="$(dpkg-architecture -qDEB_HOST_GNU_TYPE 2>/dev/null)"
 else
    TARGET="$ARCH-linux-gnu"
 fi

 export PREFIX DATA MYDB TMPSRV HOST TARGET ARCH MAKEJOBS

 # This should not be touched.
 # We need the proper versions of the applications which we want to build.
 export \
 MYSQL_VERSION \
 NGINX_VERSION \
 PHP_VERSION \
 EACCELERATOR_VERSION \
 MONIT_VERSION \
 POSTFIX_VERSION \
 GREYFIX_VERSION \
 DOVECOT_VERSION \
 SPF_VERSION \
 CLAMAV_VERSION \
 CLAMSMTP_VERSION \
 PAM_MYSQL_VERSION
 export \
 MYSQL_URL \
 NGINX_URL \
 PHP_URL \
 EACCELERATOR_URL \
 MONIT_URL \
 POSTFIX_URL \
 GREYFIX_URL \
 DOVECOT_URL \
 SPF_URL \
 CLAMAV_URL \
 CLAMSMTP_URL \
 PAM_MYSQL_URL
}

# check if we are running Debian or Ubuntu or some derivate.
is_debian()
{
 local distro=
 if [ -x /usr/bin/lsb_release ]; then
   distro="$(/usr/bin/lsb_release -i -s 2>/dev/null)"
   if [ "$distro" == "Debian" -o "$distro" == "Ubuntu" ]; then
      msg info "Running $distro, we can continue with the build."
   else
      msg error "We can only build packages on Debian based distribution."
      exit 1
   fi
 elif [ -s /etc/debian_version ]; then
   msg warn "Running Debian based distribution, we can continue with the build."
 else
   msg error "We can only build packages on Debian based distribution."
   exit 1
 fi
}

# if we are normal user, check if sudo is installed
# otherwise we can't really do anything
is_sudo()
{
 local uid=$(id -u)

 if [ $uid -ne 0 ]; then
    if [ ! -x /usr/bin/sudo ]; then
       msg error "Sudo not found, we are running as normal user, we cant go on."
       msg error "Please install sudo as root and then try again, or run $NAME with root rights."
       sleep 5
       exit 1
    fi
 fi
}

# download package (using apt-get)
get_package()
{
 local uid=$(id -u)
 local args=$1
 local cmd="apt-get install -qq -f -y ${args}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi
 msg info "Installing missing package: ${args}"
 ${cmd} > /dev/null 2>&1 || { msg error "Failed to run command: ${cmd}"; exit 1; }
}

# resolve dependencies for packages
get_dependency()
{
 local name=$1
 local dlocal="${name}deps"
 local deps="${!dlocal}"
 local uid=$(id -u)
 local cmd="apt-get install -q -f -y ${deps}"
 local logdir="$CWD/log"
 local logfile="${logdir}/${name}-dependencies.log"

 [ -d ${logdir} ] || mkdir -p ${logdir}
 [ -e ${logfile} ] && rm -f ${logfile} || :

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi
 msg info "Installing required dependencies for ${name}"
 msg warn "*** (for more information please check ${logfile}) ***"
 sleep 1
 ${cmd} > ${logfile} 2>&1 || { msg error "Failed to install dependecies for ${name}"; exit 1; }
}

# set build CFLAGS/CXXFLAGS flags
set_cflags()
{
 [ -z "$CFLAGS" ] && CFLAGS="-O2 -fPIC -pipe -fomit-frame-pointer"
 [ -z "$CXXFLAGS" ] && CXXFLAGS="-O2 -fPIC -pipe -fomit-frame-pointer"

 if [ "$ARCH" = "x86_64" ]; then
    CFLAGS="$CFLAGS"
    CXXFLAGS="$CXXFLAGS"
    LIBSUFFIX="64"
 else
    CFLAGS="$CFLAGS -march=i486 -mtune=i686"
    CXXFLAGS="$CXXFLAGS -march=i486 -mtune=i686"
    LIBSUFFIX=""
 fi

 msg info "Running $ARCH architecture, using compiler flags:"
 msg info " * CFLAGS: $CFLAGS"
 msg info " * CXXFLAGS: $CXXFLAGS"
 export CFLAGS CXXFLAGS LIBSUFFIX
}

# download package source
get_pkg()
{
 local url=$1
 local src=$2
 local cwd=${CWD}
 local srcdir=${cwd}/sources

 [ -d ${srcdir} ] || mkdir -p ${srcdir}

 if [ ! -x /usr/bin/curl ]; then
    get_package curl
 fi

 if [ ! -e ${srcdir}/${src} ]; then
    msg info "Fetching source archive ${src} from ${url} ..."
    /usr/bin/curl --tcp-nodelay -L -k -# -f -o "${srcdir}/${src}" "${url}" || { msg error "Failed to download ${src} from ${url}."; exit 1; }
 else
    msg warn "Source archive ${src} already exists."
 fi
}

# unpack package source
unpack_source()
{
 local tarname=$1
 local cwd=${CWD}
 local srcdir=${cwd}/sources

 if [ ! -e ${srcdir}/${tarname} ]; then
    msg error "${tarname}: not found."
 else
    msg info "Unpacking ${srcdir}/${tarname} in $(pwd) ..."
    tar -xf ${srcdir}/${tarname} >/dev/null 2>&1 || { msg error "Failed to unpack ${tarname}, make sure that the tarball is not broken."; exit 1; }
 fi
}

# download patch
get_patch()
{
 local url=$1
 local patchname=$2
 local patchdir="$CWD/patch"
 local patchfile="${patchdir}/${patchname}"

 [ -d ${patchdir} ] || mkdir -p ${patchdir}

 if [ ! -x /usr/bin/curl ]; then
    get_package curl
 fi

 if [ ! -e ${patchfile} ]; then
    msg info "Fetching patch file ${patchfile} from ${url}/${patchname}"
    /usr/bin/curl --tcp-nodelay -L -k -# -f -o "${patchfile}" "${url}/${patchname}" || { msg error "Failed to download patch ${patchname} from ${url}."; exit 1; }
 else
   msg warn "Patch file ${patchname} already exists."
 fi
}

# run configure for package
do_configure()
{
 local name=$1
 local args=$2
 local cwd=$(pwd)
 local logdir=$CWD/log
 local logfile=${logdir}/${name}-configure.log

 [ -d ${logdir} ] || mkdir -p ${logdir}
 [ -e ${logfile} ] && rm -f ${logfile} || :

 # set default gcc build flags CFLAGS/CXXFLAGS.
 set_cflags

 msg info "Configuring ${name} ..."
 msg info "Logfile saved in ${logfile}"
 if [ "${name}" != "mysql" -a "${name}" != "nginx" -a "${name}" != "postfix" ]; then
   ./configure \
      --prefix="${PREFIX}/${name}" \
      --sysconfdir="${PREFIX}/${name}/conf" \
      --bindir="${PREFIX}/${name}/bin" \
      --sbindir="${PREFIX}/${name}/sbin" \
      --libdir="${PREFIX}/${name}/lib${LIBSUFFIX}" \
      --target="${TARGET}" \
      --host="${TARGET}" \
      --build="${TARGET}" ${args} > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 elif [ "${name}" = "nginx" ]; then
   ./configure \
      --prefix="${PREFIX}/${name}" \
      --conf-path="${PREFIX}/${name}/conf/nginx.conf" \
      --http-log-path="/var/log/${name}/access.log" \
      --error-log-path="/var/log/${name}/error.log" \
      --http-fastcgi-temp-path="${TMPSRV}/${name}/fastcgi" \
      --http-client-body-temp-path="${TMPSRV}/${name}/client" \
      --http-proxy-temp-path="${TMPSRV}/${name}/proxy" \
      --pid-path="/var/run/${name}.pid" ${args} > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 elif [ "${name}" = "mysql" ]; then
   mkdir -p ${cwd}/build
   cd ${cwd}/build
   cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="${PREFIX}/${name}" \
    -DINSTALL_MYSQLDATADIR="${MYDB}/${name}" \
    -DSYSCONFDIR="${PREFIX}/${name}/conf" \
    ${args} .. > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 elif [ "${name}" = "postfix" ]; then
   make makefiles \
    DEBUG="" \
    CCARGS=" \
     -DDEF_CONFIG_DIR="\\"\"${PREFIX}/${name}/conf\\"\"" \
     -DUSE_TLS -DUSE_SASL_AUTH -DHAS_SSL -DHAS_MYSQL -DUSE_CYRUS -DHAS_SQLITE \
     -DUSE_CYRUS_SASL -I/usr/include/sasl \
     -DHAS_MYSQL -I${PREFIX}/mysql/include \
     -DHAS_SQLITE" \
    AUXLIBS=" \
     -L/usr/lib -L/usr/lib/ssl/engines -L${PREFIX}/mysql/lib \
     -Wl,-rpath ${PREFIX}/mysql/lib -Wl,-rpath /usr/lib \
     -Wl,-rpath /usr/lib/ssl/engines \
     -lsasl2 \
     -lssl -lcrypto \
     -lmysqlclient -lz -lm \
     -lsqlite3 -lpthread" \
    OPT="${CFLAGS}" > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 fi
}

# make and install package
run_make()
{
 local name=$1
 local logdir=$CWD/log
 local logfile=${logdir}/${name}-build.log
 local cmd=
 local uid=$(id -u)

 [ -d ${logdir} ] || mkdir -p ${logdir}
 [ -e ${logfile} ] && rm -f ${logfile} || :

 msg info "Compiling ${name} source (make -j${MAKEJOBS})"
 msg info "Logfile saved in ${logfile}"
 make -j"${MAKEJOBS}" >> ${logfile} 2>&1 || { msg error "Failed to build source."; exit 1; }

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 if [ "${name}" != "postfix" ]; then
    msg info "Installing ${name} from compiled source ($cmd make install)"
    $cmd make install >> ${logfile} 2>&1 || { msg error "Failed to install binary."; exit 1; }
 else
    msg info "Installing ${name} from compiled source ($cmd sh ./postfix-install -non-interactive)"
    $cmd sh ./postfix-install -non-interactive \
       install_root="${PREFIX}/${name}" \
       config_directory="/conf" \
       command_directory="/sbin" \
       daemon_directory="/libexec" \
       sample_directory="/sample" \
       html_directory="/html" \
       readme_directory="/doc" \
       mail_owner="postfix" \
       setgid_group="postdrop" \
       manpage_directory="/man" >> ${logfile} 2>&1 || { msg error "Failed to install binary."; exit 1; }
 fi
}

# change ownership to running user
chown_dir()
{
 local dir=$1
 local whoami="$(whoami)"

 chown ${whoami} -R ${dir} >/dev/null 2>&1 || msg error "Failed to change ownership on ${dir}."
}

# change ownership as root
chown_as_root()
{
 local user=$1
 local group=$2
 local dir=$3
 local uid=$(id -u)
 local cmd="chown ${user}.${group} -R ${dir}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to change ownership on ${dir} to ${user}.${group}."
}

# change rights as root
chmod_as_root()
{
 local mode=$1
 local dir=$2
 local uid=$(id -u)
 local cmd="chmod ${mode} ${dir}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to change rights on ${dir}."
}

# create directories as root
mkdir_as_root()
{
 local dir=$1
 local mode=$2
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 $cmd mkdir -p ${dir} >/dev/null 2>&1 || msg error "Failed to create directory ${dir}."

 if [ -n "${mode}" ]; then
    $cmd chmod ${mode} ${dir} >/dev/null 2>&1 || msg error "Failed to change rights on ${dir}."
 fi
}

# copy as root
cp_as_root()
{
 local source=$1
 local destination=$2
 local uid=$(id -u)
 local cmd="cp -f ${source} ${destination}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to copy ${source} to ${destination}."
}

# move as root
mv_as_root()
{
 local source=$1
 local destination=$2
 local uid=$(id -u)
 local cmd="mv ${source} ${destination}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to move ${source} to ${destination}."
}

# delete as root
rm_as_root()
{
 local source=$1
 local uid=$(id -u)
 local cmd="rm -fr ${source}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to delete ${source}."
}

# create link as root
ln_as_root()
{
 local source=$1
 local destination=$2
 local uid=$(id -u)
 local cmd="ln -sf ${source} ${destination}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to create link for ${source} to ${destination}."
}

# run ldconfig
ldconfig()
{
 local uid=$(id -u)
 local cmd="/sbin/ldconfig -r /"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to run ldconfig -r /"
}

# create ldconfig file for cache
ld_add()
{
 local uid=$(id -u)
 local content=$1
 local name=$2
 local cmd="echo ${content} > /etc/ld.so.conf.d/${name}.conf"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 if [ ! -e /etc/ld.so.conf.d/${name}.conf ]; then
    $cmd >/dev/null 2>&1 || msg error "Failed to created /etc/ld.so.conf.d/${name}.conf"
 fi
}

# strip directory
strip_dir()
{
 local dir=$1
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 msg info "Stripping binaries in ${dir} ..."
 if [ -d ${dir} ]; then
    $cmd find $dir | xargs file | grep -e "executable" -e "shared object" | grep ELF \
           | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
 else
    msg warn "Failed to strip ${dir} ..."
 fi
}

# strip file
strip_file()
{
 local file=$1
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 msg info "Stripping binary file ${file} ..."
 if [ -e ${file} ]; then
    $cmd strip --strip-unneeded ${file} 2> /dev/null || true
 else
    msg warn "Failed to strip ${file} ..."
 fi
}

# create user and group
create_user()
{
 # example: create_user www 10100 "Web User" /home/www
 local user=$1 # username
 local uid=$2  # uniq id
 local name=$3 # username geos
 local home=$4 # username home
 local cmd=
 local curruid=$(id -u)

 if [ $curruid -ne 0 ]; then
    cmd="sudo"
 fi

 if ! getent group ${user} >/dev/null 2>&1; then
     msg info "Creating group ${user} ..."
     ${cmd} groupadd -g ${uid} ${user} || { msg error "Failed to create group ${user}."; exit 1; }
 fi
 if ! getent passwd ${user} >/dev/null 2>&1; then
     msg info "Creating user ${user} ..."
     ${cmd} useradd -c "${name}" -u ${uid} -l -g ${uid} -M -s /bin/false -d ${home} -r ${user} || { msg error "Failed to create user ${user}."; exit 1; }
 fi

 ${cmd} /usr/sbin/pwck -s 2>/dev/null || msg error "Failed to sort /etc/passwd."
 ${cmd} /usr/sbin/grpck -s 2>/dev/null || msg error "Failed to sort /etc/group."
}

# trigger package (re)build.
trigger()
{
 local name=$1
 if [ $triggeroff -ne 1 ]; then
  if [ -n ${name} ]; then
     sleep 2
     msg info "Triggered (re)build of ${name} ..."
     build_${name} 2>/dev/null || msg error "Failed to (re)build ${name}."
  else
     msg warn "Nothing triggered ..."
  fi
 else
  msg warn "Trigger is disabled, ${name} wont be (re)build."
 fi
}

# stop server/service
stop_server()
{
 local name=$1
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 if [ -e /etc/init.d/${name} ]; then
     msg info "Shutting down ${name} ..."
     $cmd sh /etc/init.d/${name} stop >/dev/null 2>&1 || msg error "Failed to shutdown ${name}."
 else
     msg warn "Initscript for ${name} not found."
 fi
}

# start server/service
start_server()
{
 local name=$1
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 if [ -e /etc/init.d/${name} ]; then
     msg info "Starting up ${name} ..."
     $cmd sh /etc/init.d/${name} start >/dev/null 2>&1 || msg error "Failed to start ${name}."
 else
     msg warn "Initscript for ${name} not found."
 fi
}

# trigger build of mysql, very important
need_mysql()
{
 local name=$1
 export buildall=1

 if [ ! -x ${PREFIX}/mysql/bin/mysql_config ]; then
   msg info "MySQL is not installed, we need it before building ${name}"
   trigger mysql
 fi
}

# trigger build of php, some packages need this
need_php()
{
 local name=$1
 export buildall=1
 if [ ! -x ${PREFIX}/php/bin/phpize ]; then
   msg info "PHP is not available, we need it before building ${name}"
   trigger php
 fi
}

# build and install mysql server
build_mysql()
{
 local name="mysql"
 local version="${MYSQL_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${MYSQL_URL}"
 local mylogdir="${MYDB}/log"
 local logdir=$CWD/log
 local db_install_log=${logdir}/${name}-db-install.log
 local dbdir="${MYDB}/${name}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 # cat $CWD/patch/dont-build-examples-and-tests.patch | patch -p1 >/dev/null 2>&1 || { msg error "Failed to apply patch."; exit 1; }

 do_configure ${name} \
 "-DDEFAULT_CHARSET=utf8 \
  -DDEFAULT_COLLATION=utf8_general_ci \
  -DWITH_EXTRA_CHARSETS=complex \
  -DWITH_EMBEDDED_SERVER=ON \
  -DWITH_INNOBASE_STORAGE_ENGINE=1 \
  -DWITH_PARTITION_STORAGE_ENGINE=1 \
  -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \
  -DWITHOUT_ARCHIVE_STORAGE_ENGINE=1 \
  -DWITHOUT_BLACKHOLE_STORAGE_ENGINE=1 \
  -DWITHOUT_FEDERATED_STORAGE_ENGINE=1 \
  -DMYSQL_MAINTAINER_MODE=OFF \
  -DWITH_DEBUG=OFF \
  -DWITH_PERFSCHEMA_STORAGE_ENGINE=OFF \
  -DWITH_UNIT_TESTS=OFF \
  -DENABLED_PROFILING=ON \
  -DWITH_READLINE=ON \
  -DWITH_ZLIB=system \
  -DWITH_SSL=system \
  -DWITH_LIBWRAP=OFF \
  -DMYSQL_DATADIR=${MYDB}/${name} \
  -DMYSQL_UNIX_ADDR=${TMPSRV}/mysql.sock \
  -DFEATURE_SET=community \
  -DCOMPILATION_COMMENT='MySQL Community Server' \
  -DMANUFACTURER=$HOST"

 run_make ${name}
 strip_dir ${PREFIX}/${name}
 create_user mysql 10101 "MySQL Server" /srv/databases/mysql

 [ -d ${dbdir} ] || mkdir_as_root ${dbdir} 0770
 chown_as_root mysql mysql ${dbdir}
 [ -d ${mylogdir} ] || mkdir_as_root ${mylogdir} 0770
 chown_as_root mysql mysql ${mylogdir}

 echo "${PREFIX}/${name}/lib" > /etc/ld.so.conf.d/mysql.conf

 ln_as_root ${PREFIX}/${name}/bin/mysql_config /usr/bin/mysql_config
 ldconfig

 if [ ! -e ${PREFIX}/${name}/conf/my.cnf ]; then
    [ -d ${PREFIX}/${name}/conf ] || mkdir_as_root ${PREFIX}/${name}/conf
    msg info "Copying new configuration file for mysql (my.cnf) ..."
    cp_as_root support-files/my-small.cnf ${PREFIX}/${name}/conf/my.cnf
    chown_as_root root root ${PREFIX}/${name}/conf
 fi

 if [ ! -e ${MYDB}/${name}/mysql/db.frm ]; then
    [ -e ${db_install_log} ] && rm -f ${db_install_log}
    export PATH="${PREFIX}/${name}/bin:$PATH"
    msg info "Installing MySQL database in ${MYDB}/${name} ..."
    msg warn "*** (for more information please check ${db_install_log}) ***"
    ${PREFIX}/${name}/scripts/mysql_install_db \
      --basedir=${PREFIX}/${name} \
      --datadir=${MYDB}/${name} \
      --user=mysql > ${db_install_log}
 else
   msg info "MySQL database found, we wont do nothing."
 fi

 if [ ${buildall} -eq 0 ]; then
    trigger pam_mysql
    trigger dovecot
    trigger postfix
    trigger php
 fi

 cd $CWD
}

# build and install nginx
build_nginx()
{
 local name="nginx"
 local version="${NGINX_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${NGINX_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} \
 "--with-http_ssl_module \
  --with-http_realip_module \
  --with-http_addition_module \
  --with-http_flv_module \
  --with-http_gzip_static_module \
  --with-http_sub_module \
  --with-http_perl_module \
  --with-file-aio \
  --without-http_uwsgi_module \
  --without-http_scgi_module \
  --with-ipv6 \
  --without-http_uwsgi_module \
  --without-http_scgi_module \
  --without-http_memcached_module \
  --without-http_geo_module \
  --without-mail_pop3_module \
  --without-mail_imap_module \
  --without-mail_smtp_module"

 run_make ${name}
 strip_dir ${PREFIX}/${name}
 create_user www 10100 "Nginx Web Server" /srv/www

 cd $CWD
}

# build and install php
build_php()
{
 local name="php"
 local version="${PHP_VERSION}"
 local tarball="${name}-${version}.tar.bz2"
 local dir="${name}-${version}"
 local url="${PHP_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 # we need to make sure mysql is already installed.
 need_mysql ${name}

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 get_patch http://download.suhosin.org suhosin-patch-5.3.9-0.9.10.patch.gz

 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 zcat $CWD/patch/suhosin-patch-5.3.9-0.9.10.patch.gz | patch -p1 >/dev/null 2>&1 || { msg error "Failed to apply patch."; exit 1; }

 do_configure ${name} \
 "--enable-inline-optimization \
  --enable-sqlite-utf8 \
  --enable-bcmath \
  --enable-calendar \
  --enable-fpm \
  --with-fpm-user=www \
  --with-fpm-group=www \
  --with-curl \
  --enable-exif \
  --enable-ftp \
  --with-gd \
  --with-gettext \
  --with-iconv \
  --enable-mbstring \
  --enable-mbregex \
  --with-mcrypt \
  --with-mhash \
  --with-openssl \
  --with-xsl \
  --enable-sockets \
  --enable-gd-native-ttf \
  --with-zlib \
  --enable-zip \
  --enable-pcntl \
  --enable-magic-quotes \
  --with-tidy \
  --with-bz2 \
  --enable-shmop \
  --with-mm \
  --enable-mbstring=all \
  --disable-debug \
  --enable-sysvshm \
  --enable-sysvsem \
  --with-readline \
  --with-config-file-path=${PREFIX}/${name}/conf \
  --with-freetype-dir=/usr \
  --with-jpeg-dir=/usr \
  --with-mysql-sock=${TMPSRV}/mysql.sock \
  --with-mysql=${PREFIX}/mysql \
  --with-mysqli=${PREFIX}/mysql/bin/mysql_config \
  --with-pdo-mysql=${PREFIX}/mysql"

 stop_server php-fastcgi

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 if [ ! -e ${PREFIX}/${name}/conf/php.ini ]; then
    [ -d ${PREFIX}/${name}/conf ] || mkdir_as_root ${PREFIX}/${name}/conf
    msg info "Copying new configuration file for php (php.ini) ..."
    cp_as_root php.ini-production ${PREFIX}/${name}/conf/php.ini
    chown_as_root root root ${PREFIX}/${name}/conf
 fi

 if [ ${buildall} -eq 0 ]; then
    trigger eaccelerator
 fi

 start_server php-fastcgi

 cd $CWD
}

# build and install monit
build_monit()
{
 local name="monit"
 local version="${MONIT_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${MONIT_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} \
 "--program-prefix= \
  --program-suffix= \
  --enable-optimized"

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 [ -d /var/run/${name} ] || mkdir_as_root /var/run/${name} 0750
 [ -d ${PREFIX}/${name}/conf ] || mkdir_as_root ${PREFIX}/${name}/conf 0750

 cd $CWD
}

# build and install eaccelerator
build_eaccelerator()
{
 local name="eaccelerator"
 local version="${EACCELERATOR_VERSION}"
 local tarball="${name}-${version}.tar.bz2"
 local dir="${name}-${version}"
 local url="${EACCELERATOR_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 # we need to make sure php is already installed.
 need_php ${name}

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 export PATH="${PREFIX}/php/bin:$PATH"
 ${PREFIX}/php/bin/phpize >/dev/null 2>&1 || { msg error "Failed while running ${PREFIX}/php/bin/phpize."; exit 1; }

 do_configure ${name} "--enable-eaccelerator=shared"

 run_make ${name}
 strip_dir ${PREFIX}/php

 cd $CWD
}

# build and install postfix
build_postfix()
{
 local name="postfix"
 local version="${POSTFIX_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${POSTFIX_URL}"
 local queue="/var/spool/${name}"
 local lib="/var/lib/${name}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 # we need to make sure mysql is already installed.
 need_mysql ${name}

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 get_patch http://vda.sourceforge.net/VDA postfix-vda-v10-2.8.8.patch

 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 cat $CWD/patch/postfix-vda-v10-2.8.8.patch | patch -p1 >/dev/null 2>&1 || { msg error "Failed to apply patch."; exit 1; }

 do_configure ${name}

 if ! getent group postdrop >/dev/null 2>&1; then
    groupadd -g 10102 postdrop
 fi
 create_user postfix 10103 "Postfix Mail Server" /var/spool/postfix

 stop_server ${name}

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 [ -d ${lib} ] || mkdir_as_root ${lib}
 [ -d ${queue} ] || mkdir_as_root ${queue}

 for dir in active bounce corrupt defer deferred flush \
   hold incoming maildrop pid private public saved trace; do
     mkdir_as_root ${queue}/${dir}
 done
 for dir in active bounce corrupt defer deferred flush \
   hold incoming private public maildrop trace saved; do
     chown_as_root postfix root ${queue}/${dir}
 done
 chown_as_root root postdrop ${queue}/public ${queue}/maildrop
 chown_as_root root postdrop ${PREFIX}/${name}/sbin/postqueue ${PREFIX}/${name}/sbin/postdrop
 chmod_as_root 0770 ${queue}/maildrop
 chmod_as_root g+s ${PREFIX}/${name}/sbin/postqueue ${PREFIX}/${name}/sbin/postdrop
 chown_as_root postfix root ${lib}
 chmod_as_root 0755 ${lib}

 ( cd ${PREFIX}/${name}
   mv_as_root usr/sbin/sendmail sbin
 )
 mkdir_as_root ${PREFIX}/${name}/bin
 ( cd ${PREFIX}/${name}/bin
   ln_as_root ../sbin/sendmail newaliases
   ln_as_root ../sbin/sendmail mailq
 )
 rm_as_root ${PREFIX}/${name}/{usr,var}

 for bin in ${PREFIX}/${name}/sbin/* ; do
    ln_as_root ${PREFIX}/${name}/sbin/$(basename $bin) /usr/sbin/$(basename $bin)
 done
 ln_as_root ${PREFIX}/${name}/sbin/sendmail /usr/bin/newaliases
 ln_as_root ${PREFIX}/${name}/sbin/sendmail /usr/bin/mailq
 ln_as_root ${PREFIX}/${name}/sbin/sendmail /usr/lib/sendmail
 ln_as_root ${PREFIX}/${name}/conf /etc/postfix

 start_server ${name}

 cd $CWD
}

# build and install greyfix
build_greyfix()
{
 local name="greyfix"
 local version="${GREYFIX_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${GREYFIX_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} "--disable-dependency-tracking"

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 rm_as_root ${PREFIX}/${name}/var
 mkdir_as_root /var/lib/${name}
 chown_as_root nobody root /var/lib/${name}
 chmod_as_root 0750 /var/lib/${name}

 cd $CWD
}

# build and install dovecot
build_dovecot()
{
 local name="dovecot"
 local version="${DOVECOT_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${DOVECOT_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 # we need to make sure mysql is already installed.
 need_mysql ${name}

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} \
 "--with-shadow \
  --with-pam \
  --with-mysql \
  --with-ssl=openssl \
  --with-ssldir=${PREFIX}/${name}/ssl \
  --with-rundir=/var/run/dovecot \
  --without-docs \
  --with-sql \
  --with-gssapi=yes \
  --with-notify=inotify \
  --with-ioloop=epoll \
  --with-mem-align=32 \
  --with-zlib"

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 create_user dovecot 10104 "Dovecot IMAP Server" ${PREFIX}/${name}
 create_user dovenull 10105 "Dovecot Null User" ${PREFIX}/${name}
 create_user vmail 10106 "Virtual Mailbox" ${DATA}/mail/vmail
 usermod -a -G mail vmail
 usermod -a -G postfix vmail

 if ! getent passwd spamfilter >/dev/null 2>&1; then
     useradd -c "SpamAssassin User" -u 10107 -l -g nogroup -m -s /bin/bash -r spamfilter || { msg error "Failed to create user ${user}."; exit 1; }
 fi

 mkdir_as_root ${PREFIX}/${name}/conf/${name}
 mkdir_as_root /var/run/${name}
 mkdir_as_root ${DATA}/mail/vmail
 chown_as_root vmail root ${DATA}/mail/vmail
 chmod_as_root 0770 ${DATA}/mail/vmail

 cd $CWD
}

# build and install clamav
build_clamav()
{
 local name="clamav"
 local version="${CLAMAV_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${CLAMAV_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 create_user clamav 10108 "ClamAV Antivirus User" ${PREFIX}/${name}

 do_configure ${name} \
 "--with-user=clamav \
  --with-group=clamav \
  --with-dbdir=/var/lib/${name} \
  --enable-dns-fix \
  --program-prefix= \
  --program-suffix="

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 mkdir_as_root /var/lib/${name} 0755
 chown_as_root clamav root /var/lib/${name} || { msg error "Failed to change /var/lib/${name} directory ownership."; exit 1; }

 mkdir_as_root /var/log/${name} 0755
 chown_as_root clamav root /var/log/${name} || { msg error "Failed to change /var/log/${name} directory ownership."; exit 1; }

 mkdir_as_root ${PREFIX}/${name}/run 0750
 chown_as_root clamav root ${PREFIX}/${name}/run || { msg error "Failed to change ${PREFIX}/${name}/run directory ownership."; exit 1; }

 cd $CWD
}

# build and install clamsmtp
build_clamsmtp()
{
 local name="clamsmtp"
 local version="${CLAMSMTP_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${CLAMSMTP_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 # cat $CWD/patch/use_mkstemp.patch | patch -p1 >/dev/null 2>&1 || { msg error "Failed to apply patch."; exit 1; }

 do_configure ${name} "--disable-dependency-tracking"

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 mkdir_as_root ${PREFIX}/${name}/conf
 mkdir_as_root ${PREFIX}/${name}/run 0750
 chown_as_root clamav root ${PREFIX}/${name}/run

 cd $CWD
}

# build and install pam_mysql
build_pam_mysql()
{
 local name="pam_mysql"
 local version="${PAM_MYSQL_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${PAM_MYSQL_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 # we need to make sure mysql is already installed.
 need_mysql ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} \
 "--with-openssl \
  --with-cyrus-sasl=/usr \
  --with-pam=/usr \
  --with-mysql=${PREFIX}/mysql"

 run_make ${name}
 strip_file /lib/security/${name}.so

 cd $CWD
}

# build and install postfix-policyd-spf
build_spf()
{
 local name="postfix-policyd-spf-perl"
 local version="${SPF_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${SPF_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 mkdir_as_root ${PREFIX}/postfix/scripts
 msg info "Install ${name} in ${PREFIX}/postfix/scripts ..."
 install -m755 postfix-policyd-spf-perl \
   ${PREFIX}/postfix/scripts >/dev/null 2>&1 || { msg error "Failed to install ${name}."; exit1; }
 get_package libmail-spf-perl

 cd $CWD
}

# build and install all available packages
build_all()
{
 # check if is debian/ubuntu, if not exit,
 # we can't handle other type of distro's, yet.
 is_debian

 export buildall=1
 for name in $PACKAGES; do
    msg info "Building: ${name}"
    build_${name}
 done
}

# trap Ctrl+C
control_c()
{
 echo
 msg warn "Ctrl+C was pressed, we are existing ..."
 sleep 5
 exit $?
}

# check first if we have sudo, in case we run with non-root user.
is_sudo

OPT="$@"
if [ -z "${OPT}" ]; then
   usage
   msg error "no arguments supplied." 1>&2
   exit 1
fi

# set global variables before running anything.
set_global_conf

# buildpkg should be 0 where
# should be 1 in case we do build all.
buildpkg=0

trap control_c SIGINT

while [ $# -gt 0 ]; do
 case "$1" in
  --help)
    usage
    exit 0
  ;;

  --pkg*)
     if [ "$1" != "${1##--pkg=}" ]; then
        name="${1##--pkg=}"
     else
        name=$2
        shift
     fi
     buildpkg=1
  ;;

  --dont-trigger)
     export triggeroff=1
     shift
  ;;

  --all)
     msg warn "Building all available packages: $(echo $PACKAGES | sed 's/ /, /g')"
     msg warn "This option will build all packages and it can take up to several hours to finish depending on the speed of your computer."
     msg warn "If you are not sure what you are doing, just press now Ctrl+C to stop or Enter to continue with package build."
     read
     build_all
  ;;

  *)
    usage
    msg error "missing or wrong arguments."
    ;;
 esac
 shift
done

if [ $buildpkg -eq 1 ]; then
   if [ -z "$name" ]; then
      usage
      msg error "missing package name."
      exit 1
   else
      pkg=$(echo $PACKAGES | grep -w ${name} 2>/dev/null)
      if [ -z "$pkg" ]; then
         usage
         msg error "$name package is not available at this moment."
         exit 1
      else
         # check if is debian/ubuntu, if not exit,
         # we can't handle other type of distro's, yet.
         is_debian

         msg info "Building now package: $name"
         build_${name}
      fi
   fi
fi

exit 0
