#!/bin/bash

NAME=buildpkg
VERSION=1.0.1
CWD=$(pwd)

# Do not modify this, this are the only supported applications.
PACKAGES="mysql mongodb nginx php php_mongo eaccelerator postfix greyfix dovecot spf clamav clamsmtp pam_mysql phpmyadmin awstats monit"

mysqldeps="build-essential cmake g++-4.4 intltool flex bison libtool libreadline-dev libncurses5-dev libncursesw5-dev libbz2-dev zlib1g-dev libtool libaio-dev libssl-dev"
mongodbdeps="scons g++-4.4 xulrunner-dev fontconfig fontconfig-config intltool binutils libpcap-dev libpcre3-dev libboost-dev libreadline-dev python-dev libssl-dev libstdc++6-4.4-dev \
libboost-thread-dev libboost-filesystem-dev libboost-program-options-dev"
nginxdeps="build-essential bzip2 libpcre3-dev libpcrecpp0 libssl-dev libbz2-dev zlib1g-dev intltool libperl-dev libaio-dev libcurl3-gnutls"
phpdeps="build-essential libtool libltdl7 libmhash-dev libxml2-dev \
libfontconfig1-dev libfreetype6-dev libgd2-noxpm-dev libmm-dev \
libpng12-dev unixodbc-dev libsqlite3-dev libsqlite0-dev libxslt1-dev \
libdb-dev libcurl4-openssl-dev libcurl3 libbz2-dev libjpeg-dev \
libc-client2007e-dev libevent-dev libexpat1-dev libxslt1-dev \
libkrb5-dev libldap2-dev libmcrypt-dev libpspell-dev libpthread-stubs0-dev \
libsasl2-dev libtidy-dev re2c zlib1g-dev bzip2"
monitdeps="build-essential intltool libssl-dev libpam0g-dev libbz2-dev zlib1g-dev"
postfixdeps="build-essential intltool libdb-dev libsasl2-dev libsqlite3-dev libbz2-dev zlib1g-dev libssl-dev libpcre3-dev libldap2-dev"
greyfixdeps="build-essential intltool libdb-dev zlib1g-dev"
dovecotdeps="build-essential intltool libtool libdb-dev libldap2-dev libsasl2-dev libsqlite3-dev pkg-config libbz2-dev zlib1g-dev libssl-dev libldap2-dev libkrb5-dev"
spfdeps="perl libmail-sendmail-perl libsys-hostname-long-perl libmail-spf-perl"
clamavdeps="build-essential libgcc1 intltool libtool libltdl7 libmail-sendmail-perl libmilter-dev libmilter1.0.1 libsys-hostname-long-perl libtommath-dev libtommath0 zlib1g-dev libbz2-dev"
clamsmtpdeps="build-essential libmail-sendmail-perl libsys-hostname-long-perl"
pam_mysqldeps="libpam0g-dev"
awstatsdeps="perl perl-modules"
fcgiwrapdeps="libfcgi-dev automake autoconf"

export buildall=0
export triggeroff=0

# display usage
usage()
{
 cat << EOF
${NAME} script ${VERSION}
Report bugs at <robert@linux-source.org>

Usage: ${NAME} [options...]

  OPTIONS:
    --help              display this message.
    --pkg=package       build specific package.
    --dont-trigger      disable trigger (re)build of packages (use only with --pkg=package).
    --all               build all available packages.

  EXAMPLE:
    ${NAME} --pkg=mysql (build mysql package)
      or
    ${NAME} --all (build all packages available)

  AVAILABLE PACKAGES:
    ${PACKAGES}

EOF
}

# display info, warning or error message
msg()
{
 local type=$1
 local message=$2
 case "$type" in
   info)
    echo "${NAME}: info: $message" ;;
   warn)
    echo "${NAME}: warn: $message" ;;
   error)
    echo "${NAME}: error: $message" ;;
   *)
    echo "${NAME}: msg(): missing arguments, usage: \"msg info some_message\"" ;;
 esac
}

# setup global variables
set_global_conf()
{
 local config_file=

 if [ -s /etc/buildpkg.conf ]; then
    source /etc/buildpkg.conf
    config_file=/etc/buildpkg.conf
 elif [ -s $CWD/buildpkg.conf ]; then
    source $CWD/buildpkg.conf
    config_file=$CWD/buildpkg.conf
 elif [ -s $CWD/.buildpkg.conf ]; then
    source $CWD/.buildpkg.conf
    config_file=$CWD/.buildpkg.conf
 else
    usage
    msg error "unable to find a configuration file."
    msg error "im looking for: /etc/${NAME}.conf or ~/${NAME}.conf or ~/.${NAME}.conf"
    exit 1
 fi

 [ -z "$PREFIX" ] && PREFIX=/appls
 [ -z "$DATA" ] && DATA=/srv
 [ -z "$MYDB" ] && MYDB=/srv/databases
 [ -z "$TMPSRV" ] && TMPSRV=/var/webservice
 [ -z "$HOST" ] && HOST="$(hostname -f)"
 [ -z "$MYSQL_ROOT_PASSWORD" ] && MYSQL_ROOT_PASSWORD="C00lCat"

 [ -z "$MYSQL_VERSION" ] && { msg error "MYSQL_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$MONGODB_VERSION" ] && { msg error "MONGODB_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$NGINX_VERSION" ] && { msg error "NGINX_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$FCGIWRAP_VERSION" ] && { msg error "FCGIWRAP_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$SPAWN_FCGI_VERSION" ] && { msg error "SPAWN_FCGI_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$PHP_VERSION" ] && { msg error "PHP_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$PHP_MONGO_VERSION" ] && { msg error "PHP_MONGO_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$EACCELERATOR_VERSION" ] && { msg error "EACCELERATOR_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$MONIT_VERSION" ] && { msg error "MONIT_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$POSTFIX_VERSION" ] && { msg error "POSTFIX_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$GREYFIX_VERSION" ] && { msg error "GREYFIX_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$DOVECOT_VERSION" ] && { msg error "DOVECOT_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$SPF_VERSION" ] && { msg error "SPF_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$CLAMAV_VERSION" ] && { msg error "CLAMAV_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$CLAMSMTP_VERSION" ] && { msg error "CLAMSMTP_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$PAM_MYSQL_VERSION" ] && { msg error "PAM_MYSQL_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$SUHOSIN_PATCH_VERSION" ] && { msg error "SUHOSIN_PATCH_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$VDA_PATCH_VERSION" ] && { msg error "VDA_PATCH_VERSION cant be empty. Please set value in $config_file."; exit 1; }
 [ -z "$AWSTATS_VERSION" ] && { msg error "AWSTATS_VERSION cant be empty. Please set value in $config_file."; exit 1; }

 MYSQL_URL="http://ftp.gwdg.de/pub/misc/mysql/Downloads/MySQL-5.5/mysql-${MYSQL_VERSION}.tar.gz"
 MONGODB_URL="http://downloads.mongodb.org/src/mongodb-src-r${MONGODB_VERSION}.tar.gz"
 NGINX_URL="http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz"
 FCGIWRAP_URL="http://github.com/gnosek/fcgiwrap/tarball/master"
 SPAWN_FCGI_URL="http://www.lighttpd.net/download/spawn-fcgi-${SPAWN_FCGI_VERSION}.tar.gz"
 PHP_URL="http://www.php.net/distributions/php-${PHP_VERSION}.tar.bz2"
 PHP_MONGO_URL="http://pecl.php.net/get/mongo-${PHP_MONGO_VERSION}.tgz"
 # EACCELERATOR_URL="http://downloads.sourceforge.net/eaccelerator/eaccelerator-${EACCELERATOR_VERSION}.tar.bz2"
 EACCELERATOR_URL="https://github.com/eaccelerator/eaccelerator/tarball/master"
 MONIT_URL="http://www.mmonit.com/monit/dist/monit-${MONIT_VERSION}.tar.gz"
 POSTFIX_URL="ftp://ftp.its.cz/MIRRORS/ftp.porcupine.org/mirrors/postfix-release/official/postfix-${POSTFIX_VERSION}.tar.gz"
 GREYFIX_URL="http://www.kim-minh.com/pub/greyfix/greyfix-${GREYFIX_VERSION}.tar.gz"
 DOVECOT_URL="http://dovecot.org/releases/2.1/dovecot-${DOVECOT_VERSION}.tar.gz"
 SPF_URL="https://launchpad.net/postfix-policyd-spf-perl/trunk/release${SPF_VERSION}/+download/postfix-policyd-spf-perl-${SPF_VERSION}.tar.gz"
 CLAMAV_URL="http://downloads.sourceforge.net/project/clamav/clamav/${CLAMAV_VERSION}/clamav-${CLAMAV_VERSION}.tar.gz"
 CLAMSMTP_URL="http://thewalter.net/stef/software/clamsmtp/clamsmtp-${CLAMSMTP_VERSION}.tar.gz"
 PAM_MYSQL_URL="http://downloads.sourceforge.net/project/pam-mysql/pam-mysql/${PAM_MYSQL_VERSION}/pam_mysql-${PAM_MYSQL_VERSION}.tar.gz"
 PHPMYADMIN_URL="http://downloads.sourceforge.net/project/phpmyadmin/phpMyAdmin/${PHPMYADMIN_VERSION}/phpMyAdmin-${PHPMYADMIN_VERSION}-all-languages.tar.gz"
 AWSTATS_URL="http://prdownloads.sourceforge.net/awstats/awstats-${AWSTATS_VERSION}.tar.gz"

 if [[ -z "$MAKEJOBS" ]] || [[ $MAKEJOBS -eq 0 ]]; then
    MAKEJOBS="$(grep -wc MHz /proc/cpuinfo 2>/dev/null)"
 fi
 if [ "$(uname -m)" = "x86_64" ]; then
    ARCH="x86_64"
 else
    ARCH="i386"
 fi

 if [ -x /usr/bin/dpkg-architecture ]; then
    TARGET="$(dpkg-architecture -qDEB_HOST_GNU_TYPE 2>/dev/null)"
 else
    TARGET="$ARCH-linux-gnu"
 fi

 export PREFIX DATA MYDB TMPSRV HOST TARGET ARCH MAKEJOBS MYSQL_ROOT_PASSWORD

 # This should not be touched.
 # We need the proper versions of the applications which we want to build.
 export \
 MYSQL_VERSION \
 MONGODB_VERSION \
 NGINX_VERSION \
 FCGIWRAP_VERSION \
 SPAWN_FCGI_VERSION \
 PHP_VERSION \
 PHP_MONGO_VERSION \
 EACCELERATOR_VERSION \
 MONIT_VERSION \
 POSTFIX_VERSION \
 GREYFIX_VERSION \
 DOVECOT_VERSION \
 SPF_VERSION \
 CLAMAV_VERSION \
 CLAMSMTP_VERSION \
 PAM_MYSQL_VERSION \
 PHPMYADMIN_VERSION \
 SUHOSIN_PATCH_VERSION \
 VDA_PATCH_VERSION \
 AWSTATS_VERSION
 export \
 MYSQL_URL \
 MONGODB_URL \
 NGINX_URL \
 PHP_URL \
 PHP_MONGO_URL \
 EACCELERATOR_URL \
 MONIT_URL \
 POSTFIX_URL \
 GREYFIX_URL \
 DOVECOT_URL \
 SPF_URL \
 CLAMAV_URL \
 CLAMSMTP_URL \
 PAM_MYSQL_URL \
 PHPMYADMIN_URL \
 AWSTATS_URL
}

# generate random string, need it for phpmyadmin
generate_random()
{
 [ "$2" == "0" ] && CHAR="[:alnum:]" || CHAR="[:graph:]"
 cat /dev/urandom | tr -cd "$CHAR" | head -c ${1:-32}
 echo
}

# check if we are running Debian or Ubuntu or some derivate.
is_debian()
{
 local distro=
 if [ -x /usr/bin/lsb_release ]; then
   distro="$(/usr/bin/lsb_release -i -s 2>/dev/null)"
   if [ "$distro" == "Debian" -o "$distro" == "Ubuntu" ]; then
      msg info "Running $distro, we can continue with the build."
   else
      msg error "We can only build packages on Debian based distribution."
      exit 1
   fi
 elif [ -s /etc/debian_version ]; then
   msg warn "Running Debian based distribution, we can continue with the build."
 else
   msg error "We can only build packages on Debian based distribution."
   exit 1
 fi
}

# if we are normal user, check if sudo is installed
# otherwise we can't really do anything
is_sudo()
{
 local uid=$(id -u)

 if [ $uid -ne 0 ]; then
    if [ ! -x /usr/bin/sudo ]; then
       msg error "Sudo not found, we are running as normal user, we cant go on."
       msg error "Please install sudo as root and then try again, or run ${NAME} with root rights."
       sleep 5
       exit 1
    fi
 fi
}

# download package (using apt-get)
get_package()
{
 local uid=$(id -u)
 local args=$1
 local cmd="apt-get install -qq -f -y ${args}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi
 msg info "Installing missing package: ${args}"
 ${cmd} > /dev/null 2>&1 || { msg error "Failed to run command: ${cmd}"; exit 1; }
}

# resolve dependencies for packages
get_dependency()
{
 local name=$1
 local dlocal="${name}deps"
 local deps="${!dlocal}"
 local uid=$(id -u)
 local cmd="apt-get install -q -f -y ${deps}"
 local logdir="$CWD/log"
 local logfile="${logdir}/${name}-dependencies.log"

 [ -d ${logdir} ] || mkdir -p ${logdir}
 [ -e ${logfile} ] && rm -f ${logfile} || :

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi
 msg info "Installing required dependencies for ${name}"
 msg info "Logfile saved in ${logfile}"
 ${cmd} > ${logfile} 2>&1 || { msg error "Failed to install dependecies for ${name}"; exit 1; }
 sleep 1
}

# set build CFLAGS/CXXFLAGS flags
set_cflags()
{
 [ -z "$CFLAGS" ] && CFLAGS="-O2 -fPIC -pipe -fomit-frame-pointer" 
 [ -z "$CXXFLAGS" ] && CXXFLAGS="-O2 -fPIC -pipe -fomit-frame-pointer"

 if [ "$ARCH" = "x86_64" ]; then
    CFLAGS="$CFLAGS -mtune=native -m64 -ftree-vectorize -mfpmath=sse"
    CXXFLAGS="$CXXFLAGS -mtune=native -m64 -ftree-vectorize -mfpmath=sse"
    LIBSUFFIX="64"
 else
    CFLAGS="$CFLAGS -march=i686 -mtune=native -m32 -msse2 -mfpmath=sse"
    CXXFLAGS="$CXXFLAGS -march=i686 -mtune=native -m31 -msse2 -mfpmath=sse"
    LIBSUFFIX=""
 fi

 export CFLAGS CXXFLAGS LIBSUFFIX
}

# download function using wget
download()
{
 local url=$1
 local output=$2

 if [ ! -x /usr/bin/wget ]; then
    get_package wget
 fi

 /usr/bin/wget --max-redirect=10 --no-check-certificate --no-cookies -q "${url}" -O "${output}" >/dev/null 2>&1
 if [ $? -eq 0 ]; then
    echo "OK"
 else
    echo "Failed"
 fi
}

# download package source
get_pkg()
{
 local url=$1
 local src=$2
 local srcdir="${CWD}/sources"
 local localpwd="$(pwd)"

 [ -d ${srcdir} ] || mkdir -p ${srcdir}
 cd ${srcdir}

 if [ ! -e ${src} ]; then
    echo -n "${NAME}: info: Fetching source archive ${src}: "
    download "${url}" "${src}"
 else
    msg warn "Source archive ${src} already exists."
 fi

 cd ${localpwd}
}

# unpack package source
unpack_source()
{
 local tarname=$1
 local srcdir="${CWD}/sources"

 if [ ! -e ${srcdir}/${tarname} ]; then
    msg error "${tarname}: not found."
 else
    msg info "Unpacking ${srcdir}/${tarname} in $(pwd) ..."
    tar -xf ${srcdir}/${tarname} >/dev/null 2>&1 || { msg error "Failed to unpack ${tarname}, make sure that the tarball is not broken."; exit 1; }
 fi
}

# download patch
get_patch()
{
 local url=$1
 local patchname=$2
 local patchdir="${CWD}/patches"
 local patchfile="${patchdir}/${patchname}"
 local localpwd="$(pwd)"

 [ -d ${patchdir} ] || mkdir -p ${patchdir}
 cd ${patchdir}

 url="${url}/${patchname}"
 if [ ! -e ${patchname} ]; then
    echo -ne "${NAME}: info: Fetching patch file ${patchname}: "
    download "${url}" "${patchname}"
 else
    msg warn "Patch file ${patchname} already exists."
 fi

 cd ${localpwd}
}

# apply patch
apply_patch()
{
 local patch_file=$1
 local strip=$2
 local logdir=$CWD/log
 local logfile=${logdir}/${name}-patches.log
 local cmd=

 if [ ! -x /usr/bin/patch ]; then
    get_package patch
 fi

 if [ -s ${patch_file} ]; then
    if [ $(file ${patch_file} |grep -qw text >/dev/null 2>&1; echo $?) -eq 0 ]; then
       cmd=cat
    elif [ $(file ${patch_file} |grep -qw gzip >/dev/null 2>&1; echo $?) -eq 0 ]; then
       cmd=zcat
    elif [ $(file ${patch_file} |grep -qw bzip2 >/dev/null 2>&1; echo $?) -eq 0 ]; then
       cmd=bzcat
    else
       msg warn "unable to determine patch file type."
       msg warn "patch ${patch_file} not applied."
    fi
    if [ "$cmd" != "" ]; then
       [ -d ${logdir} ] || mkdir -p ${logdir}
       msg info "Applying patch ${patch_file} ($cmd ${patch_file} | patch -p${strip}) ..."
       msg info "Logfile saved in ${logfile}"
       $cmd ${patch_file} | patch -p${strip} >> ${logfile} 2>&1
       if [ $? -ne 0 ]; then
          msg error "unable to apply patch ${patch_file}."
          exit $?
       fi
    fi
 else
    msg warn "patch ${patch_file} not available or broken."
 fi
}

# run configure for package
do_configure()
{
 local name=$1
 local args=$2
 local cwd=$(pwd)
 local logdir=$CWD/log
 local logfile=${logdir}/${name}-configure.log

 [ -d ${logdir} ] || mkdir -p ${logdir}
 [ -e ${logfile} ] && rm -f ${logfile} || :

 msg info "Running $ARCH architecture, using compiler flags:"
 msg info " * CFLAGS: $CFLAGS"
 msg info " * CXXFLAGS: $CXXFLAGS"

 msg info "Configuring ${name} ..."
 msg info "Logfile saved in ${logfile}"
 if [ "${name}" != "mysql" -a "${name}" != "nginx" -a "${name}" != "postfix" -a "${name}" != "fcgiwrap" -a "${name}" != "spawn-fcgi" ]; then
   ./configure \
      --prefix="${PREFIX}/${name}" \
      --sysconfdir="${PREFIX}/${name}/conf" \
      --bindir="${PREFIX}/${name}/bin" \
      --sbindir="${PREFIX}/${name}/sbin" \
      --libdir="${PREFIX}/${name}/lib${LIBSUFFIX}" \
      --target="${TARGET}" \
      --host="${TARGET}" \
      --build="${TARGET}" ${args} > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 elif [ "${name}" = "fcgiwrap" -o "${name}" = "spawn-fcgi" ]; then
   ./configure \
     --prefix="${PREFIX}/nginx" \
     --target="${TARGET}" \
     --host="${TARGET}" \
     --build="${TARGET}" ${args} > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 elif [ "${name}" = "nginx" ]; then
   ./configure \
      --prefix="${PREFIX}/${name}" \
      --conf-path="${PREFIX}/${name}/conf/nginx.conf" \
      --http-log-path="/var/log/${name}/access.log" \
      --error-log-path="/var/log/${name}/error.log" \
      --http-fastcgi-temp-path="${TMPSRV}/${name}/fastcgi" \
      --http-client-body-temp-path="${TMPSRV}/${name}/client" \
      --http-proxy-temp-path="${TMPSRV}/${name}/proxy" \
      --pid-path="/var/run/${name}.pid" ${args} > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 elif [ "${name}" = "mysql" ]; then
   mkdir -p ${cwd}/build
   cd ${cwd}/build
   cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="${PREFIX}/${name}" \
    -DSYSCONFDIR="${PREFIX}/${name}/conf" \
    ${args} .. > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 elif [ "${name}" = "postfix" ]; then
   make makefiles \
    DEBUG="" \
    CCARGS=" \
     -DNO_NIS \
     -DDEF_CONFIG_DIR="\\"\"${PREFIX}/${name}/conf\\"\"" \
     -DUSE_TLS -DUSE_SASL_AUTH -DHAS_SSL -DHAS_MYSQL -DUSE_CYRUS -DHAS_SQLITE -DHAS_LDAP \
     -DUSE_CYRUS_SASL -I/usr/include/sasl \
     -DHAS_MYSQL -I${PREFIX}/mysql/include \
     -Wno-comments" \
    AUXLIBS=" \
     -L${PREFIX}/mysql/lib \
     -Wl,-rpath ${PREFIX}/mysql/lib \
     -lpcre \
     -lldap -llber \
     -lsasl2 -lssl -lcrypto \
     -lmysqlclient -lsqlite3 \
     -lpthread -lz -lm -lrt -ldl -lresolv" \
    OPT="${CFLAGS}" > ${logfile} 2>&1 || { msg error "Failed to configure ${name}."; exit 1; }
 fi
}

# make and install package
run_make()
{
 local name=$1
 local logdir=$CWD/log
 local logfile=${logdir}/${name}-build.log
 local cmd=
 local uid=$(id -u)

 [ -d ${logdir} ] || mkdir -p ${logdir}
 [ -e ${logfile} ] && rm -f ${logfile} || :

 SCONS_OPT="--nostrip --full --ssl --release --use-system-pcre --use-system-boost" 
 if [ "$ARCH" = "x86_64" ]; then
   SCONS_OPT="${SCONS_OPT} --64"
 else
   SCONS_OPT="${SCONS_OPT} --32"
 fi

 if [ "${name}" = "mongodb" ]; then
    msg info "Running $ARCH architecture, without compiler flags."
    msg info "Compiling ${name} source (scons -j${MAKEJOBS} ${SCONS_OPT} --prefix=${PREFIX}/${name})"
    msg info "Logfile saved in ${logfile}"
    scons -j${MAKEJOBS} ${SCONS_OPT} --prefix=${PREFIX}/${name} >> ${logfile} 2>&1 || { msg error "Failed to build source."; exit 1; }
 else 
    msg info "Compiling ${name} source (make -j${MAKEJOBS})"
    msg info "Logfile saved in ${logfile}"
    make -j${MAKEJOBS} >> ${logfile} 2>&1 || { msg error "Failed to build source."; exit 1; }
 fi

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 if [ "${name}" = "php" ]; then
    stop_service ${name}-fpm
 else
    stop_service ${name}
 fi

 if [ "${name}" = "postfix" ]; then
    msg info "Installing ${name} from compiled source (sh ./postfix-install -non-interactive)"
    $cmd sh ./postfix-install -non-interactive \
       install_root="${PREFIX}/${name}" \
       config_directory="/conf" \
       command_directory="/sbin" \
       daemon_directory="/libexec" \
       sample_directory="/sample" \
       html_directory="/html" \
       readme_directory="/doc" \
       mail_owner="postfix" \
       setgid_group="postdrop" \
       manpage_directory="/man" >> ${logfile} 2>&1 || { msg error "Failed to install binary."; exit 1; }
 elif [ "${name}" = "mongodb" ]; then
   msg info "Installing ${name} from compiled source (scons install ${SCONS_OPT} --prefix=${PREFIX}/${name})"
   $cmd scons install \
       ${SCONS_OPT} --prefix=${PREFIX}/${name} install >> ${logfile} 2>&1 || { msg error "Failed to install binary."; exit 1; }
 else
   msg info "Installing ${name} from compiled source (make install)"
   $cmd make install >> ${logfile} 2>&1 || { msg error "Failed to install binary."; exit 1; }
 fi

}

# change ownership to running user
chown_dir()
{
 local dir=$1
 local whoami="$(whoami)"

 chown ${whoami}.${whoami} -R ${dir} >/dev/null 2>&1 || msg error "Failed to change ownership on ${dir}."
}

# change ownership as root
chown_as_root()
{
 local user=$1
 local group=$2
 local source=$3
 local uid=$(id -u)
 local cmd="chown ${user}.${group} ${source}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi
 if [ $(file ${source} |grep -qw directory >/dev/null 2>&1; echo $?) -eq 0 ]; then
    cmd="${cmd} -R"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to change ownership on ${source} to ${user}.${group}."
}

# change rights as root
chmod_as_root()
{
 local mode=$1
 local source=$2
 local uid=$(id -u)
 local cmd="chmod ${mode} ${source}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to change rights on ${source}."
}

# create directories as root
mkdir_as_root()
{
 local dir=$1
 local mode=$2
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 $cmd mkdir -p ${dir} >/dev/null 2>&1 || msg error "Failed to create directory ${dir}."

 if [ -n "${mode}" ]; then
    $cmd chmod ${mode} ${dir} >/dev/null 2>&1 || msg error "Failed to change rights on ${dir}."
 fi
}

# copy as root
cp_as_root()
{
 local source=$1
 local destination=$2
 local uid=$(id -u)
 local cmd="cp -f ${source} ${destination}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to copy ${source} to ${destination}."
}

# move as root
mv_as_root()
{
 local source=$1
 local destination=$2
 local uid=$(id -u)
 local cmd="mv ${source} ${destination}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to move ${source} to ${destination}."
}

# delete as root
rm_as_root()
{
 local source=$1
 local uid=$(id -u)
 local cmd="rm -fr ${source}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to delete ${source}."
}

# create link as root
ln_as_root()
{
 local source=$1
 local destination=$2
 local uid=$(id -u)
 local cmd="ln -sf ${source} ${destination}"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi

 $cmd >/dev/null 2>&1 || msg error "Failed to create link for ${source} to ${destination}."
}

# run ldconfig
ldconfig()
{
 local uid=$(id -u)
 local cmd="/sbin/ldconfig -r /"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi
 
 msg info "Running ldconfig -r / ..."
 $cmd >/dev/null 2>&1 || msg error "Failed to run ldconfig -r /"
}

# create ldconfig file for cache
ld_add()
{
 local uid=$(id -u)
 local content=$1
 local name=$2
 local cmd="sh -c"

 if [ $uid -ne 0 ]; then
    cmd="sudo ${cmd}"
 fi
 
 [ -d /etc/ld.so.conf.d ] || mkdir_as_root /etc/ld.so.conf.d

 if [ ! -e /etc/ld.so.conf.d/${name}.conf ]; then
    $cmd "echo ${content} > /etc/ld.so.conf.d/${name}.conf" 2>/dev/null || msg error "Failed to created /etc/ld.so.conf.d/${name}.conf"
 fi
}

# strip directory
strip_dir()
{
 local dir=$1
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 msg info "Stripping binaries in ${dir} ..."
 if [ -d ${dir} ]; then
    $cmd find $dir | xargs file | grep -e "executable" -e "shared object" | grep ELF \
           | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
 else
    msg warn "Failed to strip ${dir} ..."
 fi
}

# strip file
strip_file()
{
 local file=$1
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 msg info "Stripping binary file ${file} ..."
 if [ -e ${file} ]; then
    $cmd strip --strip-unneeded ${file} 2> /dev/null || true
 else
    msg warn "Failed to strip ${file} ..."
 fi
}

# create user and group
create_user()
{
 # example: create_user www 10100 "Web User" /home/www
 local user=$1 # username
 local uid=$2  # uniq id
 local geos=$3 # username geos
 local home=$4 # username home
 local cmd=
 local curruid=$(id -u)

 if [ $curruid -ne 0 ]; then
    cmd="sudo"
 fi

 if ! getent group ${user} >/dev/null 2>&1; then
     msg info "Creating group ${user} ..."
     ${cmd} groupadd -g ${uid} ${user} || { msg error "Failed to create group ${user}."; exit 1; }
 fi
 if ! getent passwd ${user} >/dev/null 2>&1; then
     msg info "Creating user ${user} ..."
     ${cmd} useradd -c "${geos}" -u ${uid} -l -g ${uid} -M -s /bin/false -d ${home} -r ${user} || { msg error "Failed to create user ${user}."; exit 1; }
 fi

 ${cmd} /usr/sbin/pwck -s 2>/dev/null || msg error "Failed to sort /etc/passwd."
 ${cmd} /usr/sbin/grpck -s 2>/dev/null || msg error "Failed to sort /etc/group."
}

# trigger package (re)build.
trigger()
{
 local name=$1
 if [ $triggeroff -eq 0 ]; then
  if [ -n ${name} ]; then
     sleep 1
     msg info "Triggered (re)build of ${name} ..."
     build_${name} 2>/dev/null || msg error "Failed to (re)build ${name}."
  else
     msg warn "Nothing triggered ..."
  fi
 else
  msg warn "Trigger is disabled, ${name} wont be (re)build."
 fi
}

# stop server/service
stop_service()
{
 local name=$1
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 if [ -e /etc/init.d/${name} ]; then
     msg info "Shutting down ${name} ..."
     $cmd sh /etc/init.d/${name} stop >/dev/null 2>&1 || msg warn "Failed to shutdown ${name}."
 else
     msg warn "Initscript for ${name} not found."
 fi
}

# start server/service
start_service()
{
 local name=$1
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 if [ -e /etc/init.d/${name} ]; then
     msg info "Starting up ${name} ..."
     $cmd sh /etc/init.d/${name} start >/dev/null 2>&1 || msg warn "Failed to start ${name}."
 else
     msg warn "Initscript for ${name} not found."
 fi
}

# trigger build of mysql, very important
need_mysql()
{
 local name=$1
 local localall=$buildall

 export buildall=1
 if [ ! -x ${PREFIX}/mysql/bin/mysql_config ]; then
   msg info "MySQL is not installed, we need it before building ${name}."
   trigger mysql
 fi
 export buildall=$localall
}

# trigger build of mongodb, very important
need_mongodb()
{
 local name=$1
 local localall=$buildall

 export buildall=1
 if [ ! -x ${PREFIX}/mongodb/sbin/mongod ]; then
   msg info "MongoDB is not installed, we need it before building ${name}."
   trigger mongodb
 fi
 export buildall=$localall
}

# trigger build of php, some packages need this
need_php()
{
 local name=$1
 local localall=$buildall

 export buildall=1
 if [ ! -x ${PREFIX}/php/bin/phpize ]; then
   msg info "PHP is not available, we need it before building ${name}."
   trigger php
 fi
 export buildall=$localall
}

# trigger build of nginx, some packages need this
need_nginx()
{
 local name=$1
 local localall=$buildall

 export buildall=1
 if [ ! -x ${PREFIX}/nginx/sbin/nginx ]; then
   msg info "nginx is not available, we need it before building ${name}."
   trigger nginx
 fi
 export buildall=$localall
}

# trigger build of clamav, some packages need this
need_clamav()
{
 local name=$1
 local localall=$buildall

 export buildall=1
 if [ ! -x ${PREFIX}/clamav/sbin/clamd ]; then
   msg info "clamav is not available, we need it before building ${name}."
   trigger clamav
 fi
 export buildall=$localall
}

# build and install mysql server
build_mysql()
{
 local name="mysql"
 local version="${MYSQL_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${MYSQL_URL}"
 local mylogdir="${MYDB}/log/${name}"
 local logdir=$CWD/log
 local db_install_log=${logdir}/${name}-db-install.log
 local dbdir="${MYDB}/${name}"
 local db_install=0
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 apply_patch $CWD/patches/${name}_dont-build-examples-and-tests.patch.gz 1

 do_configure ${name} \
 "-DDEFAULT_CHARSET=utf8 \
  -DDEFAULT_COLLATION=utf8_general_ci \
  -DWITH_EXTRA_CHARSETS=complex \
  -DWITH_EMBEDDED_SERVER=OFF \
  -DWITH_INNOBASE_STORAGE_ENGINE=1 \
  -DWITH_PARTITION_STORAGE_ENGINE=1 \
  -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \
  -DWITHOUT_ARCHIVE_STORAGE_ENGINE=1 \
  -DWITHOUT_BLACKHOLE_STORAGE_ENGINE=1 \
  -DWITHOUT_FEDERATED_STORAGE_ENGINE=1 \
  -DMYSQL_MAINTAINER_MODE=OFF \
  -DWITH_DEBUG=OFF \
  -DWITH_PERFSCHEMA_STORAGE_ENGINE=OFF \
  -DWITH_UNIT_TESTS=OFF \
  -DENABLED_PROFILING=OFF \
  -DWITH_READLINE=ON \
  -DWITH_ZLIB=system \
  -DWITH_SSL=system \
  -DWITH_LIBWRAP=OFF \
  -DINSTALL_SBINDIR=libexec \
  -DINSTALL_LIBDIR="lib${LIBSUFFIX}" \
  -DINSTALL_PLUGINDIR="lib${LIBSUFFIX}/mysql/plugin" \
  -DINSTALL_MYSQLDATADIR=${dbdir} \
  -DMYSQL_DATADIR=${dbdir} \
  -DMYSQL_UNIX_ADDR=${TMPSRV}/mysql.sock \
  -DFEATURE_SET=community \
  -DCOMPILATION_COMMENT=MySQL_Community_Server \
  -DMANUFACTURER=$HOST"

 run_make ${name}
 strip_dir ${PREFIX}/${name}
 create_user mysql 10101 "MySQL Server" ${dbdir}

 if [ "$ARCH" = "x86_64" ]; then
    ( cd ${PREFIX}/${name}
      ln_as_root lib${LIBSUFFIX} lib 
    )
 fi

 [ -d ${dbdir} ] || mkdir_as_root ${dbdir} 0770
 chown_as_root mysql mysql ${dbdir}
 [ -d ${mylogdir} ] || mkdir_as_root ${mylogdir} 0770
 chown_as_root mysql mysql ${mylogdir}

 ( cd /usr/bin
   ln_as_root ../..${PREFIX}/${name}/bin/mysql_config .
 )

 ld_add "${PREFIX}/${name}/lib${LIBSUFFIX}" ${name}
 ldconfig

 mkdir_as_root $TMPSRV 0777
 chown_as_root root root $TMPSRV

 [ -d ${PREFIX}/${name}/conf ] || mkdir_as_root ${PREFIX}/${name}/conf
 mv_as_root ${PREFIX}/${name}/bin/mysqlaccess.conf ${PREFIX}/${name}/conf/mysqlaccess.conf
 chmod_as_root 0644 ${PREFIX}/${name}/conf/mysqlaccess.conf

 [ -e ${PREFIX}/${name}/bin/mysqlaccess ] && \
 $cmd sed -i \
    -e "/\$script_conf/ s|${PREFIX}/${name}|${PREFIX}/${name}/conf|g" \
    -e "/my.cnf/ s|${PREFIX}/${name}|${PREFIX}/${name}/conf|g" \
    ${PREFIX}/${name}/bin/mysqlaccess

 if [ ! -e ${PREFIX}/${name}/conf/my.cnf ]; then
    msg info "Copying new configuration file for ${name} (my.cnf) ..."
    cp_as_root $CWD/config.d/my.cnf ${PREFIX}/${name}/conf/my.cnf
    chown_as_root root root ${PREFIX}/${name}/conf
    [ -e ${PREFIX}/${name}/conf/my.cnf ] && \
    $cmd sed -i \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      -e "s|@@MYDB@@|${MYDB}|g" \
      -e "s|@@MYLOG@@|${MYDB}|g" \
      ${PREFIX}/${name}/conf/my.cnf >/dev/null 2>&1
 fi
 if [ ! -e /etc/init.d/${name} ]; then
    msg info "Copying start/stop script for ${name} (/etc/init.d/${name}) ..."
    cp_as_root $CWD/scripts/${name} /etc/init.d/${name}
    chown_as_root root root /etc/init.d/${name}
    chmod_as_root 0755 /etc/init.d/${name}
    [ -e /etc/init.d/${name} ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      -e "s|@@MYDB@@|${MYDB}|g" \
      /etc/init.d/${name} >/dev/null 2>&1
 fi

 if [ ! -e ${dbdir}/mysql/db.frm ]; then
    db_install=1
    [ -e ${db_install_log} ] && rm -f ${db_install_log}
    export PATH="${PREFIX}/${name}/bin:$PATH"
    msg info "Installing MySQL database in ${dbdir} ..."
    msg info "Logfile saved in ${db_install_log}"
    $cmd ${PREFIX}/${name}/scripts/mysql_install_db \
      --basedir=${PREFIX}/${name} \
      --datadir=${dbdir} \
      --user=mysql > ${db_install_log} 2>&1
 else
   db_install=0
   msg info "MySQL database found, we wont do nothing."
 fi

 [ -d /etc/profile.d ] || mkdir_as_root /etc/profile.d 0755
 if [ ! -e /etc/profile.d/${name}.sh ]; then
    msg info "Copying ${name}.sh to /etc/profile.d ... "
    cp_as_root $CWD/profile.d/${name}.sh /etc/profile.d
    chown_as_root root root /etc/profile.d/${name}.sh
    chmod_as_root 0644 /etc/profile.d/${name}.sh
    [ -e /etc/profile.d/${name}.sh ] && \
    $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
       /etc/profile.d/${name}.sh >/dev/null 2>&1
 fi

 start_service ${name}

 if [ $db_install -eq 1 ]; then
    msg info "Updating default MySQL root user password ..."
    $cmd ${PREFIX}/${name}/bin/mysqladmin -u root -h localhost password "${MYSQL_ROOT_PASSWORD}" >/dev/null 2>&1 || msg error "Failed to update the MySQL root user password."
    msg info "Dropping all other MySQL users with empty passwords (for security reasons) ..."
    $cmd ${PREFIX}/${name}/bin/mysql -u root -p${MYSQL_ROOT_PASSWORD} -h localhost \
       -Bse "set sql_safe_updates = 0; delete from mysql.user where Password = ''; set sql_safe_updates = 1;" >/dev/null 2>&1 || \
       msg error "Failed to drop users."
    msg info "Dropping MySQL test database (we have no use for an empty database) ..."
    $cmd ${PREFIX}/${name}/bin/mysql -u root -p${MYSQL_ROOT_PASSWORD} -h localhost \
       -Bse "drop database test; set sql_safe_updates = 0; delete from mysql.db; set sql_safe_updates = 1;" >/dev/null 2>&1 || \
       msg error "Failed to drop test database."
    msg info "Running MySQL flush privileges, tables, status statements."
    $cmd ${PREFIX}/${name}/bin/mysql -u root -p${MYSQL_ROOT_PASSWORD} -h localhost \
       -Bse "flush privileges; flush tables; flush tables with read lock; flush status;" >/dev/null 2>&1 || \
       msg error "Failed to run flush statements."
    db_install=0
 fi

 cd $CWD

 if [ ${buildall} -eq 0 ]; then
    trigger pam_mysql
    trigger dovecot
    trigger postfix
    trigger php
 fi

}

# build and install mongodb server
build_mongodb()
{
 local name="mongodb"
 local version="${MONGODB_VERSION}"
 local tarball="${name}-src-r${version}.tar.gz"
 local dir="${name}-src-r${version}"
 local url="${MONGODB_URL}"
 local mylogdir="${MYDB}/log/${name}"
 local logdir=$CWD/log
 local dbdir="${MYDB}/${name}"
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 apply_patch $CWD/patches/${name}_change-compiler-flags.patch.gz 1
 apply_patch $CWD/patches/${name}_rename-unixSocketPrefix-to-socketpath.patch.gz 1
 sed -i "s|/data/db/|${dbdir}|" src/mongo/db/pdfile.cpp
 chmod_as_root 0644 README
 chmod_as_root 0644 src/mongo/db/security.h

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 [ -d ${PREFIX}/${name}/sbin ] || mkdir_as_root ${PREFIX}/${name}/sbin 0755
 mv_as_root ${PREFIX}/${name}/bin/mongod ${PREFIX}/${name}/sbin/mongod

 if [ "$ARCH" = "x86_64" ]; then
   rm_as_root ${PREFIX}/${name}/lib
   ( cd ${PREFIX}/${name}
     ln_as_root lib${LIBSUFFIX} lib
   )
 fi

 create_user mongodb 10109 "MondoDB Server" ${dbdir}

 [ -d ${dbdir} ] || mkdir_as_root ${dbdir} 0770
 chown_as_root mongodb mongodb ${dbdir}
 [ -d ${mylogdir} ] || mkdir_as_root ${mylogdir} 0770
 chown_as_root mongodb mongodb ${mylogdir}

 [ -d ${PREFIX}/${name}/conf ] || mkdir_as_root ${PREFIX}/${name}/conf
 if [ ! -e ${PREFIX}/${name}/conf/mongod.conf ]; then
    msg info "Copying new configuration file for ${name} (mongod.conf) ..."
    cp_as_root $CWD/config.d/mongod.conf ${PREFIX}/${name}/conf/mongod.conf
    chown_as_root root root ${PREFIX}/${name}/conf
    [ -e ${PREFIX}/${name}/conf/mongod.conf ] && \
    $cmd sed -i \
      -e "s|@@MYDB@@|${MYDB}|g" \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      ${PREFIX}/${name}/conf/mongod.conf >/dev/null 2>&1
 fi
 if [ ! -e /etc/init.d/${name} ]; then
    msg info "Copying start/stop script for ${name} (/etc/init.d/${name}) ..."
    cp_as_root $CWD/scripts/${name} /etc/init.d/${name}
    chown_as_root root root /etc/init.d/${name}
    chmod_as_root 0755 /etc/init.d/${name}
    [ -e /etc/init.d/${name} ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      -e "s|@@MYDB@@|${MYDB}|g" \
      /etc/init.d/${name} >/dev/null 2>&1
 fi

 [ -d /etc/profile.d ] || mkdir_as_root /etc/profile.d 0755
 if [ ! -e /etc/profile.d/${name}.sh ]; then
    msg info "Copying ${name}.sh to /etc/profile.d ... "
    cp_as_root $CWD/profile.d/${name}.sh /etc/profile.d
    chown_as_root root root /etc/profile.d/${name}.sh
    chmod_as_root 0644 /etc/profile.d/${name}.sh
    [ -e /etc/profile.d/${name}.sh ] && \
    $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
       /etc/profile.d/${name}.sh >/dev/null 2>&1
 fi

 start_service ${name}

 cd $CWD
}

# build and install nginx
build_nginx()
{
 local name="nginx"
 local version="${NGINX_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${NGINX_URL}"
 local fcginame="gnosek-fcgiwrap-b9f03e6"
 local fcgitar="fcgiwrap-${FCGIWRAP_VERSION}.tar.gz"
 local fcgiurl="${FCGIWRAP_URL}"
 local spawnname="spawn-fcgi-${SPAWN_FCGI_VERSION}"
 local spawntar="${spawnname}.tar.gz"
 local spawnurl="${SPAWN_FCGI_URL}"
 local wwwlog=/var/log/${name}
 local wwwdir=${DATA}/www
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_pkg ${url} ${tarball}
 get_pkg ${fcgiurl} ${fcgitar}
 get_pkg ${spawnurl} ${spawntar}

 get_dependency ${name}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 apply_patch $CWD/patches/nginx-drop-server-name.patch.gz 1

 do_configure ${name} \
 "--with-http_ssl_module \
  --with-http_realip_module \
  --with-http_addition_module \
  --with-http_flv_module \
  --with-http_gzip_static_module \
  --with-http_sub_module \
  --with-http_perl_module \
  --with-file-aio \
  --without-http_uwsgi_module \
  --without-http_scgi_module \
  --with-ipv6 \
  --without-http_uwsgi_module \
  --without-http_scgi_module \
  --without-http_memcached_module \
  --without-http_geo_module \
  --without-mail_pop3_module \
  --without-mail_imap_module \
  --without-mail_smtp_module"

 run_make ${name}
 strip_dir ${PREFIX}/${name}
 create_user www 10100 "nginx http/https server" ${wwwdir}

 mkdir_as_root ${wwwlog} 0770
 chown_as_root www root ${wwwlog}
 mkdir_as_root ${wwwdir} 0755

 if [ ! -e ${PREFIX}/${name}/conf/.do-not-delete-me ]; then
    mkdir_as_root ${PREFIX}/${name}/conf/sites.d
    mkdir_as_root ${DATA}/www/${HOST}
    [ -e ${PREFIX}/${name}/conf/${name}.conf ] && rm_as_root ${PREFIX}/${name}/conf/${name}.conf
    msg info "Copying new configuration file for ${name} (${name}.conf) ..."
    cp_as_root $CWD/config.d/${name}.conf ${PREFIX}/${name}/conf/${name}.conf
    [ -e ${PREFIX}/${name}/conf/fastcgi.conf ] && rm_as_root ${PREFIX}/${name}/conf/fastcgi.conf
    msg info "Copying new configuration file for ${name} (fastcgi.conf) ..."
    cp_as_root $CWD/config.d/fastcgi.conf ${PREFIX}/${name}/conf/fastcgi.conf
    [ -e ${PREFIX}/${name}/conf/proxy.conf ] && rm_as_root ${PREFIX}/${name}/conf/proxy.conf
    msg info "Copying new configuration file for ${name} (proxy.conf) ..."
    cp_as_root $CWD/config.d/proxy.conf ${PREFIX}/${name}/conf/proxy.conf
    [ -e ${PREFIX}/${name}/conf/sites.d/${HOST}.conf ] && rm_as_root ${PREFIX}/${name}/conf/sites.d/${HOST}.conf
    msg info "Copying new configuration file for ${name} (${HOST}.conf) ..."
    cp_as_root $CWD/config.d/${name}.example.conf ${PREFIX}/${name}/conf/sites.d/${HOST}.conf
    [ -e ${PREFIX}/${name}/conf/${name}.conf ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      ${PREFIX}/${name}/conf/${name}.conf >/dev/null 2>&1
    [ -e ${PREFIX}/${name}/conf/sites.d/${HOST}.conf ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      -e "s|@@HOST@@|${HOST}|g" \
      -e "s|@@DATA@@|${DATA}/www/${HOST}|g" \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      ${PREFIX}/${name}/conf/sites.d/${HOST}.conf >/dev/null 2>&1
    msg info "Copying PHP example file for ${name} (index.php) ..."
    cp_as_root $CWD/config.d/nginx-test-pages/index.php ${DATA}/www/${HOST}/index.php
    msg info "Copying HTML example file for ${name} (index.htm) ..."
    cp_as_root $CWD/config.d/nginx-test-pages/index.htm ${DATA}/www/${HOST}/index.htm
    $cmd touch ${PREFIX}/${name}/conf/.do-not-delete-me
    chown_as_root root root ${DATA}/www/${HOST}
    chown_as_root root root ${PREFIX}/${name}/conf
 fi

 if [ ! -e /etc/init.d/${name} ]; then
    msg info "Copying start/stop script for ${name} (/etc/init.d/${name}) ..."
    cp_as_root $CWD/scripts/${name} /etc/init.d/${name}
    chown_as_root root root /etc/init.d/${name}
    chmod_as_root 0755 /etc/init.d/${name}
    [ -e /etc/init.d/${name} ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      /etc/init.d/${name} >/dev/null 2>&1
 fi

 [ -d /etc/profile.d ] || mkdir_as_root /etc/profile.d 0755
 if [ ! -e /etc/profile.d/${name}.sh ]; then
    msg info "Copying ${name}.sh to /etc/profile.d ... "
    cp_as_root $CWD/profile.d/${name}.sh /etc/profile.d
    chown_as_root root root /etc/profile.d/${name}.sh
    chmod_as_root 0644 /etc/profile.d/${name}.sh
    [ -e /etc/profile.d/${name}.sh ] && \
    $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
       /etc/profile.d/${name}.sh >/dev/null 2>&1
 fi

 start_service ${name}

 cd $CWD

 # build spawn-fcgi
 [ -d build ] || mkdir -p build
 cd build
 [ -d ${spawnname} ] && rm -fr ${spawnname} || :

 unpack_source ${spawntar}
 chown_dir ${spawnname}
 cd ${spawnname} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure spawn-fcgi
 run_make spawn-fcgi
 strip_file ${PREFIX}/${name}/bin/spawn-fcgi

 cd $CWD

 # build fcgiwrap
 [ -d build ] || mkdir -p build
 cd build
 [ -d ${fcginame} ] && rm -fr ${fcginame} || :

 get_dependency fcgiwrap

 unpack_source ${fcgitar}
 chown_dir ${fcginame}
 cd ${fcginame} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 [ -x /usr/bin/aclocal ] && /usr/bin/aclocal || { msg error "aclocal failed."; exit 1; }
 [ -x /usr/bin/autoreconf ] && /usr/bin/autoreconf || { msg error "autoreconf failed."; exit 1; }

 do_configure fcgiwrap
 run_make fcgiwrap
 strip_file ${PREFIX}/${name}/sbin/fcgiwrap

 if [ ! -e /etc/init.d/fcgiwrap ]; then
    msg info "Copying start/stop script for fcgiwrap (/etc/init.d/fcgiwrap) ..."
    cp_as_root $CWD/scripts/fcgiwrap /etc/init.d/fcgiwrap
    chown_as_root root root /etc/init.d/fcgiwrap
    chmod_as_root 0755 /etc/init.d/fcgiwrap
    [ -e /etc/init.d/fcgiwrap ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      /etc/init.d/fcgiwrap >/dev/null 2>&1
 fi

 start_service fcgiwrap

 cd $CWD 
}

# build and install php
build_php()
{
 local name="php"
 local version="${PHP_VERSION}"
 local tarball="${name}-${version}.tar.bz2"
 local dir="${name}-${version}"
 local url="${PHP_URL}"
 local wwwdir=${DATA}/www
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 # we need to make sure mysql is already installed.
 need_mysql ${name}

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 # get_patch http://download.suhosin.org suhosin-patch-${SUHOSIN_PATCH_VERSION}.patch.gz

 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 apply_patch $CWD/patches/suhosin-patch-${SUHOSIN_PATCH_VERSION}.patch.gz 1

 do_configure ${name} \
 "--enable-inline-optimization \
  --enable-sqlite-utf8 \
  --enable-bcmath \
  --enable-calendar \
  --enable-fpm \
  --with-fpm-user=www \
  --with-fpm-group=www \
  --with-curl \
  --enable-exif \
  --enable-ftp \
  --with-gd \
  --with-gettext \
  --with-iconv \
  --enable-mbstring \
  --enable-mbregex \
  --with-mcrypt \
  --with-mhash \
  --with-openssl \
  --with-xsl \
  --enable-sockets \
  --enable-gd-native-ttf \
  --with-zlib \
  --enable-zip \
  --enable-pcntl \
  --enable-magic-quotes \
  --with-tidy \
  --with-bz2 \
  --enable-shmop \
  --with-mm \
  --enable-mbstring=all \
  --disable-debug \
  --enable-sysvshm \
  --enable-sysvsem \
  --with-readline \
  --with-config-file-path=${PREFIX}/${name}/conf \
  --with-config-file-scan-dir=${PREFIX}/${name}/conf/conf.d \
  --with-freetype-dir=/usr \
  --with-jpeg-dir=/usr \
  --with-mysql-sock=${TMPSRV}/mysql.sock \
  --with-mysql=${PREFIX}/mysql \
  --with-mysqli=${PREFIX}/mysql/bin/mysql_config \
  --with-pdo-mysql=${PREFIX}/mysql"

 run_make ${name}
 strip_dir ${PREFIX}/${name}
 create_user www 10100 "nginx http/https server" ${wwwdir}

 mkdir_as_root /var/log/nginx 0770
 chown_as_root www root /var/log/nginx

 [ -d ${PREFIX}/${name}/conf ] || mkdir_as_root ${PREFIX}/${name}/conf
 if [ ! -e ${PREFIX}/${name}/conf/${name}.ini ]; then
    msg info "Copying new configuration file for ${name} (${name}.ini) ..."
    cp_as_root $CWD/config.d/${name}.ini ${PREFIX}/${name}/conf/${name}.ini
    chown_as_root root root ${PREFIX}/${name}/conf
    [ -e ${PREFIX}/${name}/conf/${name}.ini ] && \
    $cmd sed -i \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      ${PREFIX}/${name}/conf/${name}.ini >/dev/null 2>&1
 fi
 if [ ! -e ${PREFIX}/${name}/conf/.do-not-delete-me ]; then
    msg info "Copying new configuration file for ${name} (${name}-fpm.conf) ..."
    [ -e ${PREFIX}/${name}/conf/${name}-fpm.conf ] && rm_as_root ${PREFIX}/${name}/conf/${name}-fpm.conf
    cp_as_root $CWD/config.d/${name}-fpm.conf ${PREFIX}/${name}/conf/${name}-fpm.conf
    [ -e ${PREFIX}/${name}/conf/${name}-fpm.conf ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      ${PREFIX}/${name}/conf/${name}-fpm.conf >/dev/null 2>&1
    $cmd touch ${PREFIX}/${name}/conf/.do-not-delete-me
    chown_as_root root root ${PREFIX}/${name}/conf
 fi

 if [ ! -e /etc/init.d/${name}-fpm ]; then
    msg info "Copying start/stop script for ${name} (/etc/init.d/${name}-fpm) ..."
    cp_as_root $CWD/scripts/${name}-fpm /etc/init.d/${name}-fpm
    chown_as_root root root /etc/init.d/${name}-fpm
    chmod_as_root 0755 /etc/init.d/${name}-fpm
    [ -e /etc/init.d/${name}-fpm ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      /etc/init.d/${name}-fpm >/dev/null 2>&1
 fi

 [ -d /etc/profile.d ] || mkdir_as_root /etc/profile.d 0755
 if [ ! -e /etc/profile.d/${name}.sh ]; then
    msg info "Copying ${name}.sh to /etc/profile.d ... "
    cp_as_root $CWD/profile.d/${name}.sh /etc/profile.d
    chown_as_root root root /etc/profile.d/${name}.sh
    chmod_as_root 0644 /etc/profile.d/${name}.sh
    [ -e /etc/profile.d/${name}.sh ] && \
    $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
       /etc/profile.d/${name}.sh >/dev/null 2>&1
 fi

 start_service ${name}-fpm

 cd $CWD

 if [ ${buildall} -eq 0 ]; then
    trigger eaccelerator
    trigger php_mongo
 fi

}

# build and install monit
build_monit()
{
 local name="monit"
 local version="${MONIT_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${MONIT_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 apply_patch $CWD/patches/monit_rename-monitrc-to-monit.conf.patch.gz 1

 do_configure ${name} \
 "--program-prefix= \
  --program-suffix= \
  --enable-optimized"

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 [ -d /var/run/${name} ] || mkdir_as_root /var/run/${name} 0750
 [ -d ${PREFIX}/${name}/conf ] || mkdir_as_root ${PREFIX}/${name}/conf 0700

 if [ ! -e ${PREFIX}/${name}/conf/${name}.conf ]; then
    msg info "Copying new configuration file for ${name} (${name}.conf) ..."
    cp_as_root $CWD/config.d/${name}.conf ${PREFIX}/${name}/conf/${name}.conf
    chown_as_root root root ${PREFIX}/${name}/conf
    chmod_as_root 0600 ${PREFIX}/${name}/conf/${name}.conf
    [ -e ${PREFIX}/${name}/conf/${name}.conf ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      ${PREFIX}/${name}/conf/${name}.conf >/dev/null 2>&1
 fi

 if [ ! -e /etc/init.d/${name} ]; then
    msg info "Copying start/stop script for ${name} (/etc/init.d/${name}) ..."
    cp_as_root $CWD/scripts/${name} /etc/init.d/${name}
    chown_as_root root root /etc/init.d/${name}
    chmod_as_root 0755 /etc/init.d/${name}
    [ -e /etc/init.d/${name} ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      /etc/init.d/${name} >/dev/null 2>&1
 fi

 [ -d /etc/profile.d ] || mkdir_as_root /etc/profile.d 0755
 if [ ! -e /etc/profile.d/${name}.sh ]; then
    msg info "Copying ${name}.sh to /etc/profile.d ... "
    cp_as_root $CWD/profile.d/${name}.sh /etc/profile.d
    chown_as_root root root /etc/profile.d/${name}.sh
    chmod_as_root 0644 /etc/profile.d/${name}.sh
    [ -e /etc/profile.d/${name}.sh ] && \
    $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
       /etc/profile.d/${name}.sh >/dev/null 2>&1
 fi

 start_service ${name}

 cd $CWD
}

# build and install php_mongo
build_php_mongo()
{
 local name="mongo"
 local version="${PHP_MONGO_VERSION}"
 local tarball="${name}-${version}.tgz"
 local dir="${name}-${version}"
 local url="${PHP_MONGO_URL}"
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 # we need to make sure php is already installed.
 need_php ${name}
 need_mongodb ${name}

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 export PATH="${PREFIX}/php/bin:$PATH"
 ${PREFIX}/php/bin/phpize >/dev/null 2>&1 || { msg error "Failed while running ${PREFIX}/php/bin/phpize."; exit 1; }

 
 export CPPFLAGS="-I${PREFIX}/mongodb/include"
 export LDFLAGS="-L${PREFIX}/mongodb/lib${LIBSUFFIX}"
 do_configure ${name} "--enable-mongo"

 run_make ${name}
 strip_dir ${PREFIX}/php

 [ -d ${PREFIX}/php/conf/conf.d ] || mkdir_as_root ${PREFIX}/php/conf/conf.d
 if [ ! -e ${PREFIX}/php/conf/conf.d/mongo.ini ]; then
    msg info "Copying new configuration file for ${name} (${name}.ini) ..."
    cp_as_root $CWD/config.d/mongo.ini ${PREFIX}/php/conf/conf.d/mongo.ini
    chown_as_root root root ${PREFIX}/php/conf/conf.d
 fi

 stop_service php-fpm
 start_service php-fpm

 cd $CWD
}

# build and install eaccelerator
build_eaccelerator()
{
 local name="eaccelerator"
 local version="${EACCELERATOR_VERSION}"
 local tarball="${name}-${version}.tar.bz2"
 # local dir="${name}-${version}"
 local dir="${name}-${name}-42067ac"
 local url="${EACCELERATOR_URL}"
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 # we need to make sure php is already installed.
 need_php ${name}

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 export PATH="${PREFIX}/php/bin:$PATH"
 ${PREFIX}/php/bin/phpize >/dev/null 2>&1 || { msg error "Failed while running ${PREFIX}/php/bin/phpize."; exit 1; }

 do_configure ${name} "--enable-eaccelerator"

 run_make ${name}
 strip_dir ${PREFIX}/php
 rm_as_root ${TMPSRV}/php/eaccelerator/*

 [ -d ${PREFIX}/php/conf/conf.d ] || mkdir_as_root ${PREFIX}/php/conf/conf.d
 if [ ! -e ${PREFIX}/php/conf/conf.d/eaccelerator.ini ]; then
    msg info "Copying new configuration file for ${name} (${name}.ini) ..."
    cp_as_root $CWD/config.d/eaccelerator.ini ${PREFIX}/php/conf/conf.d/eaccelerator.ini
    chown_as_root root root ${PREFIX}/php/conf/conf.d
    $cmd sed -i \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      ${PREFIX}/php/conf/conf.d/eaccelerator.ini >/dev/null 2>&1
 fi

 stop_service php-fpm
 start_service php-fpm

 cd $CWD
}

# build and install postfix
build_postfix()
{
 local name="postfix"
 local version="${POSTFIX_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${POSTFIX_URL}"
 local queue="/var/spool/${name}"
 local lib="/var/lib/${name}"
 local vmaildir="${DATA}/mail/vmail"
 local date=$(date "+%Y%m%d")
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 # we need to make sure mysql is already installed.
 need_mysql ${name}

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 get_patch http://vda.sourceforge.net/VDA postfix-vda-${VDA_PATCH_VERSION}.patch

 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 apply_patch $CWD/patches/postfix-vda-${VDA_PATCH_VERSION}.patch 1

 if [ -e ${PREFIX}/${name}/conf/main.cf ]; then
    msg info "Backing up main.cf configuration file to main.cf.${date} ..."
    cp_as_root ${PREFIX}/${name}/conf/main.cf ${PREFIX}/${name}/conf/main.cf.${date}
 fi
 if [ -e ${PREFIX}/${name}/conf/master.cf ]; then
    msg info "Backing up master.cf configuration file to master.cf.${date} ..."
    cp_as_root ${PREFIX}/${name}/conf/master.cf ${PREFIX}/${name}/conf/master.cf.${date}
 fi

 do_configure ${name}

 cd lib
  for i in dns global master tls util milter; do
     ln -sf lib${i}.a lib${name}-${i}.so.1.0.1
     ln -sf lib${name}-${i}.so.1.0.1 lib${name}-${i}.so.1
     ln -sf lib${i}.a lib${i}.so.1.0.1
     ln -sf lib${i}.a lib${i}.so.1
  done
 cd ..

 export LD_LIBRARY_PATH="$(pwd)/lib:${LD_LIBRARY_PATH}"
 run_make ${name}
 strip_dir ${PREFIX}/${name}
 export LD_LIBRARY_PATH=

 if ! getent group postdrop >/dev/null 2>&1; then
     groupadd -g 10102 postdrop >/dev/null >/dev/null 2>&1 || { msg error "Failed to create group postdrop."; exit 1; }
 fi
 if ! getent passwd spamfilter >/dev/null 2>&1; then
     useradd -c "SpamAssassin User" -u 10107 -l -g nogroup -m -s /bin/false -r spamfilter >/dev/null 2>&1 || { msg error "Failed to create user ${user}."; exit 1; }
 fi
 create_user postfix 10103 "Postfix Mail Server" /var/spool/postfix
 create_user vmail 10106 "Virtual Mailbox" ${vmaildir}
 $cmd usermod -a -G mail vmail >/dev/null 2>&1 || msg error "Failed to add user vmail to group mail."
 $cmd usermod -a -G postfix vmail >/dev/null 2>&1 || msg error "Failed to add user vmail to group postfix."

 mkdir_as_root ${lib}
 mkdir_as_root ${queue}
 mkdir_as_root ${vmaildir}

 for dir in active bounce corrupt defer deferred flush \
   hold incoming maildrop pid private public saved trace; do
     mkdir_as_root ${queue}/${dir}
     chown_as_root postfix root ${queue}/${dir}
     chmod_as_root 0700 ${queue}/${dir}
 done

 chown_as_root root postdrop ${PREFIX}/${name}/sbin/postqueue
 chown_as_root root postdrop ${PREFIX}/${name}/sbin/postdrop
 chown_as_root postfix postdrop ${queue}/public
 chown_as_root postfix postdrop ${queue}/maildrop
 chown_as_root postfix root ${lib}
 chown_as_root vmail root ${vmaildir}
 chmod_as_root 0770 ${vmaildir}
 chmod_as_root 2755 ${PREFIX}/${name}/sbin/postqueue
 chmod_as_root 2755 ${PREFIX}/${name}/sbin/postdrop
 chmod_as_root 0770 ${queue}/maildrop
 chmod_as_root 0770 ${queue}/public
 chmod_as_root 0755 ${queue}/pid
 chmod_as_root 0750 ${lib}

 ( cd ${PREFIX}/${name}
   mv_as_root usr/sbin/sendmail sbin
 )
 mkdir_as_root ${PREFIX}/${name}/bin
 ( cd ${PREFIX}/${name}/bin
   ln_as_root ../sbin/sendmail newaliases
   ln_as_root ../sbin/sendmail mailq
 )
 rm_as_root ${PREFIX}/${name}/{usr,var}

 for bin in ${PREFIX}/${name}/sbin/* ; do
    ( cd /usr/sbin
      ln_as_root ../..${PREFIX}/${name}/sbin/$(basename $bin) .
    )
 done

 ( cd /usr/bin
   ln_as_root ../..${PREFIX}/${name}/sbin/sendmail newaliases
   ln_as_root ../..${PREFIX}/${name}/sbin/sendmail mailq
   cd /usr/lib
   ln_as_root ../..${PREFIX}/${name}/sbin/sendmail .
 )

 if [ -e /etc/aliases ]; then
    msg info "Generating /etc/aliases.db for postfix ..."
    ${PREFIX}/${name}/sbin/postalias /etc/aliases >/dev/null 2>&1
    if [ $? -ne 0 ]; then
       msg error "Failed to generate /etc/aliases.db file."
    fi
 fi

 if [ ! -e /etc/init.d/${name} ]; then
    msg info "Copying start/stop script for ${name} (/etc/init.d/${name}) ..."
    cp_as_root $CWD/scripts/${name} /etc/init.d/${name}
    chown_as_root root root /etc/init.d/${name}
    chmod_as_root 0755 /etc/init.d/${name}
    [ -e /etc/init.d/${name} ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      /etc/init.d/${name} >/dev/null 2>&1
 fi

 if [ -e ${PREFIX}/${name}/conf/main.cf ]; then
    $cmd sed -i \
      -e "s|^command_directory.*|command_directory = ${PREFIX}/${name}/sbin|g" \
      -e "s|^daemon_directory.*|daemon_directory = ${PREFIX}/${name}/libexec|g" \
      -e "s|^html_directory.*|html_directory = ${PREFIX}/${name}/html|g" \
      -e "s|^manpage_directory.*|manpage_directory = ${PREFIX}/${name}/man|g" \
      -e "s|^sample_directory.*|sample_directory = ${PREFIX}/${name}/sample|g" \
      -e "s|^readme_directory.*|readme_directory = ${PREFIX}/${name}/doc|g" \
      ${PREFIX}/${name}/conf/main.cf >/dev/null 2>&1
 fi

 [ -d /etc/profile.d ] || mkdir_as_root /etc/profile.d 0755
 if [ ! -e /etc/profile.d/${name}.sh ]; then
    msg info "Copying ${name}.sh to /etc/profile.d ... "
    cp_as_root $CWD/profile.d/${name}.sh /etc/profile.d
    chown_as_root root root /etc/profile.d/${name}.sh
    chmod_as_root 0644 /etc/profile.d/${name}.sh
    [ -e /etc/profile.d/${name}.sh ] && \
    $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
       /etc/profile.d/${name}.sh >/dev/null 2>&1
 fi

 start_service ${name}

 cd $CWD
}

# build and install greyfix
build_greyfix()
{
 local name="greyfix"
 local version="${GREYFIX_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${GREYFIX_URL}"
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} "--disable-dependency-tracking"

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 rm_as_root ${PREFIX}/${name}/var
 mkdir_as_root /var/lib/${name}
 chown_as_root nobody root /var/lib/${name}
 chmod_as_root 0750 /var/lib/${name}

 if [ ! -e ${PREFIX}/${name}/sbin/autogrey ]; then
    msg info "Copying postfix integration script for ${name} (${PREFIX}/${name}/sbin/autogrey) ..."
    cp_as_root $CWD/scripts/autogrey ${PREFIX}/${name}/sbin/autogrey
    chown_as_root root root ${PREFIX}/${name}/sbin/autogrey
    chmod_as_root 0755 ${PREFIX}/${name}/sbin/autogrey
    [ -e ${PREFIX}/${name}/sbin/autogrey ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      -e "s|@@HOST@@|${HOST}|g" \
      ${PREFIX}/${name}/sbin/autogrey >/dev/null 2>&1
 fi

 [ -d /etc/profile.d ] || mkdir_as_root /etc/profile.d 0755
 if [ ! -e /etc/profile.d/${name}.sh ]; then
    msg info "Copying ${name}.sh to /etc/profile.d ... "
    cp_as_root $CWD/profile.d/${name}.sh /etc/profile.d
    chown_as_root root root /etc/profile.d/${name}.sh
    chmod_as_root 0644 /etc/profile.d/${name}.sh
    [ -e /etc/profile.d/${name}.sh ] && \
    $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
       /etc/profile.d/${name}.sh >/dev/null 2>&1
 fi

 cd $CWD
}

# build and install dovecot
build_dovecot()
{
 local name="dovecot"
 local version="${DOVECOT_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${DOVECOT_URL}"
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 # we need to make sure mysql is already installed.
 need_mysql ${name}

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 do_configure ${name} \
 "--with-shadow \
  --with-pam \
  --with-mysql \
  --with-ldap \
  --with-ssl=openssl \
  --with-ssldir=${PREFIX}/${name}/ssl \
  --with-rundir=/var/run/${name} \
  --with-statedir=/var/lib/${name} \
  --without-docs \
  --with-sql \
  --with-gssapi=yes \
  --with-notify=inotify \
  --with-ioloop=epoll \
  --with-mem-align=32 \
  --with-zlib"

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 mkdir_as_root ${PREFIX}/${name}/conf/${name}
 mkdir_as_root /var/run/${name}
 mkdir_as_root /var/lib/${name}
 chmod_as_root 0750 /var/lib/${name}

 create_user dovecot 10104 "Dovecot IMAP Server" /var/run/${name}
 create_user dovenull 10105 "Dovecot Null User" /var/run/${name}

 if [ ! -e ${PREFIX}/${name}/conf/${name}/${name}.conf ]; then
    msg info "Copying new configuration file for ${name} (${name}.conf) ..."
    cp_as_root $CWD/config.d/${name}.conf ${PREFIX}/${name}/conf/${name}
    msg info "Copying new configuration subdir conf.d for ${name} ..."
    $cmd cp -aRf doc/example-config/conf.d ${PREFIX}/${name}/conf/${name}
    [ -e ${PREFIX}/${name}/conf/${name}/conf.d/10-ssl.conf ] && \
    $cmd sed -i \
      -e "/^ssl_cert/ s/ssl_cert/# ssl_cert/" \
      -e "/^ssl_key/ s/ssl_key/# ssl_key/" \
      -e "/^#ssl[[:space:]]=/ s/#//" \
      -e "/^ssl[[:space:]]=/ s/yes/no/" \
      ${PREFIX}/${name}/conf/${name}/conf.d/10-ssl.conf >/dev/null 2>&1
    chown_as_root root root ${PREFIX}/${name}/conf
 fi

 if [ ! -e /etc/init.d/${name} ]; then
    msg info "Copying start/stop script for ${name} (/etc/init.d/${name}) ..."
    cp_as_root $CWD/scripts/${name} /etc/init.d/${name}
    chown_as_root root root /etc/init.d/${name}
    chmod_as_root 0755 /etc/init.d/${name}
    [ -e /etc/init.d/${name} ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      /etc/init.d/${name} >/dev/null 2>&1
 fi

 [ -d /etc/profile.d ] || mkdir_as_root /etc/profile.d 0755
 if [ ! -e /etc/profile.d/${name}.sh ]; then
    msg info "Copying ${name}.sh to /etc/profile.d ... "
    cp_as_root $CWD/profile.d/${name}.sh /etc/profile.d
    chown_as_root root root /etc/profile.d/${name}.sh
    chmod_as_root 0644 /etc/profile.d/${name}.sh
    [ -e /etc/profile.d/${name}.sh ] && \
    $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
       /etc/profile.d/${name}.sh >/dev/null 2>&1
 fi

 start_service ${name}

 cd $CWD
}

# build and install clamav
build_clamav()
{
 local name="clamav"
 local version="${CLAMAV_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${CLAMAV_URL}"
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 create_user clamav 10108 "ClamAV Antivirus User" ${PREFIX}/${name}

 do_configure ${name} \
 "--with-user=clamav \
  --with-group=clamav \
  --with-dbdir=/var/lib/${name} \
  --enable-dns-fix \
  --program-prefix= \
  --program-suffix="

 stop_service ${name}-freshclam
 stop_service ${name}-clamd

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 mkdir_as_root /var/lib/${name} 0750
 chown_as_root clamav root /var/lib/${name}

 mkdir_as_root /var/log/${name} 0750
 chown_as_root clamav root /var/log/${name}

 mkdir_as_root ${PREFIX}/${name}/run 0750
 chown_as_root clamav root ${PREFIX}/${name}/run

 mkdir_as_root $TMPSRV 0777
 chown_as_root root root $TMPSRV

 if [ $(grep -qw ^Example ${PREFIX}/${name}/conf/clamd.conf 2>/dev/null; echo $?) -eq 0 ]; then
    msg info "Copying new configuration file for ${name} (clamd.conf) ..."
    [ -e ${PREFIX}/${name}/conf/clamd.conf ] && rm_as_root ${PREFIX}/${name}/conf/clamd.conf
    cp_as_root $CWD/config.d/clamd.conf ${PREFIX}/${name}/conf
    chown_as_root root root ${PREFIX}/${name}/conf
    [ -e ${PREFIX}/${name}/conf/clamd.conf ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      ${PREFIX}/${name}/conf/clamd.conf >/dev/null 2>&1
 fi
 if [ $(grep -qw ^Example ${PREFIX}/${name}/conf/freshclam.conf 2>/dev/null; echo $?) -eq 0 ]; then
    msg info "Copying new configuration file for ${name} (freshclam.conf) ..."
    [ -e ${PREFIX}/${name}/conf/freshclam.conf ] && rm_as_root ${PREFIX}/${name}/conf/freshclam.conf
    cp_as_root $CWD/config.d/freshclam.conf ${PREFIX}/${name}/conf
    chown_as_root root root ${PREFIX}/${name}/conf
    [ -e ${PREFIX}/${name}/conf/freshclam.conf ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      ${PREFIX}/${name}/conf/freshclam.conf >/dev/null 2>&1
 fi

 if [ ! -e /etc/init.d/${name}-clamd ]; then
    msg info "Copying start/stop script for ${name} (/etc/init.d/${name}-clamd) ..."
    cp_as_root $CWD/scripts/${name}-clamd /etc/init.d/${name}-clamd
    chown_as_root root root /etc/init.d/${name}-clamd
    chmod_as_root 0755 /etc/init.d/${name}-clamd
    [ -e /etc/init.d/${name}-clamd ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      /etc/init.d/${name}-clamd >/dev/null 2>&1
 fi
 if [ ! -e /etc/init.d/${name}-freshclam ]; then
    msg info "Copying start/stop script for ${name} (/etc/init.d/${name}-freshclam) ..."
    cp_as_root $CWD/scripts/${name}-freshclam /etc/init.d/${name}-freshclam
    chown_as_root root root /etc/init.d/${name}-freshclam
    chmod_as_root 0755 /etc/init.d/${name}-freshclam
    [ -e /etc/init.d/${name}-freshclam ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      /etc/init.d/${name}-freshclam >/dev/null 2>&1
 fi

 [ -d /etc/profile.d ] || mkdir_as_root /etc/profile.d 0755
 if [ ! -e /etc/profile.d/${name}.sh ]; then
    msg info "Copying ${name}.sh to /etc/profile.d ... "
    cp_as_root $CWD/profile.d/${name}.sh /etc/profile.d
    chown_as_root root root /etc/profile.d/${name}.sh
    chmod_as_root 0644 /etc/profile.d/${name}.sh
    [ -e /etc/profile.d/${name}.sh ] && \
    $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
       /etc/profile.d/${name}.sh >/dev/null 2>&1
 fi

 start_service ${name}-clamd

 if [ -d /var/lib/${name} ]; then
    msg info "Updating ${name} anti-virus definitions ..."
    msg info " * please wait, time may take a while, depending on your internet connetion speed."
    ${PREFIX}/${name}/bin/freshclam >/dev/null 2>&1
    if [ $? -ne 0 ]; then
       msg warn "something happened, wasnt able to update anti-virus definitions."
    fi
 fi

 start_service ${name}-freshclam

 cd $CWD
}

# build and install clamsmtp
build_clamsmtp()
{
 local name="clamsmtp"
 local version="${CLAMSMTP_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${CLAMSMTP_URL}"
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 # we need to make sure clamav is already installed.
 need_clamav ${name}

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 apply_patch $CWD/patches/${name}_use_mkstemp.patch.gz 1

 do_configure ${name} "--disable-dependency-tracking"

 run_make ${name}
 strip_dir ${PREFIX}/${name}

 mkdir_as_root ${PREFIX}/${name}/conf
 mkdir_as_root /var/run/${name}
 chown_as_root clamav root /var/run/${name}
 chmod_as_root 0755 /var/run/${name}

 if [ ! -e ${PREFIX}/${name}/conf/${name}d.conf ]; then
    msg info "Copying new configuration file for ${name} (${name}d.conf) ..."
    cp_as_root $CWD/config.d/${name}d.conf ${PREFIX}/${name}/conf/${name}d.conf
    chown_as_root root root ${PREFIX}/${name}/conf
    [ -e ${PREFIX}/${name}/conf/${name}d.conf ] && \
    $cmd sed -i \
      -e "s|@@TMPSRV@@|${TMPSRV}|g" \
      ${PREFIX}/${name}/conf/${name}d.conf >/dev/null 2>&1
 fi

 if [ ! -e /etc/init.d/${name} ]; then
    msg info "Copying start/stop script for ${name} (/etc/init.d/${name}) ..."
    cp_as_root $CWD/scripts/${name} /etc/init.d/${name}
    chown_as_root root root /etc/init.d/${name}
    chmod_as_root 0755 /etc/init.d/${name}
    [ -e /etc/init.d/${name} ] && \
    $cmd sed -i \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      /etc/init.d/${name} >/dev/null 2>&1
 fi

 start_service ${name}

 cd $CWD
}

# build and install pam_mysql
build_pam_mysql()
{
 local name="pam_mysql"
 local version="${PAM_MYSQL_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${PAM_MYSQL_URL}"

 # we need to make sure mysql is already installed.
 need_mysql ${name}

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }
 apply_patch $CWD/patches/${name}_openssl.patch.gz 1

 # In some newer systems, pam modules are not in /lib/security, but some other place.
 PAM_MODULES_DIR=$(find /lib /lib64 -name pam_env.so 2>/dev/null | head -n 1 | xargs dirname 2>/dev/null)

 do_configure ${name} \
 "--with-openssl \
  --with-cyrus-sasl=/usr \
  --with-pam=/usr \
  --with-mysql=${PREFIX}/mysql \
  --with-pam-mods-dir=${PAM_MODULES_DIR}"

 run_make ${name}
 rm_as_root ${PAM_MODULES_DIR}/${name}.la
 chmod_as_root 0644 ${PAM_MODULES_DIR}/${name}.so
 strip_file ${PAM_MODULES_DIR}/${name}.so

 cd $CWD
}

# build and install postfix-policyd-spf
build_spf()
{
 local name="postfix-policyd-spf-perl"
 local version="${SPF_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${SPF_URL}"

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 mkdir_as_root ${PREFIX}/postfix/scripts
 msg info "Installing ${name} script in ${PREFIX}/postfix/scripts ..."
 cp_as_root postfix-policyd-spf-perl \
   ${PREFIX}/postfix/scripts >/dev/null 2>&1
 chmod_as_root 0755 ${PREFIX}/postfix/scripts/postfix-policyd-spf-perl

 cd $CWD
}

# build and install phpmyadmin
build_phpmyadmin()
{
 local name="phpmyadmin"
 local version="${PHPMYADMIN_VERSION}"
 local tarball="phpMyAdmin-${version}-all-languages.tar.gz"
 local dir="phpMyAdmin-${version}-all-languages"
 local url="${PHPMYADMIN_URL}"
 local wwwdir=${DATA}/www
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 # we need to make sure mysql is already installed.
 need_mysql ${name}

 # we need to make sure nginx is already installed.
 need_nginx ${name}

 # we need to make sure php is already installed.
 need_php ${name}

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 mkdir_as_root ${wwwdir}
 mkdir_as_root ${PREFIX}/${name}

 ( cd ${wwwdir}
   [ -L ${name} ] || ln_as_root ../..${PREFIX}/${name} .
 )

 $cmd cp -aRf * ${PREFIX}/${name}

 if [ -e ${PREFIX}/nginx/conf/nginx.conf ]; then
  if [ ! -e ${PREFIX}/nginx/conf/sites.d/${name}.conf ]; then
     mkdir_as_root ${PREFIX}/nginx/conf/sites.d
     msg info "Copying new configuration file for nginx (${name}.conf) ..."
     cp_as_root $CWD/config.d/nginx.${name}.conf ${PREFIX}/nginx/conf/sites.d/${name}.conf
     [ -e ${PREFIX}/nginx/conf/sites.d/${name}.conf ] && \
     $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/nginx|g" \
       -e "s|@@DATA@@|${DATA}/www/${name}|g" \
       -e "s|@@TMPSRV@@|${TMPSRV}|g" \
       ${PREFIX}/nginx/conf/sites.d/${name}.conf >/dev/null 2>&1
     chown_as_root root root ${PREFIX}/nginx/conf/sites.d/${name}.conf
  fi
 fi

 if [ ! -e ${PREFIX}/${name}/config.inc.php ]; then
    msg info "Generating a default configuration for ${name} (${PREFIX}/${name}/config.inc.php) ..."
    $cmd cat << EOF > ${PREFIX}/${name}/config.inc.php
<?php
/* Generated by buildpkg */

\$cfg['blowfish_secret'] = '$(generate_random 45 0)';

/*
 * Servers configuration
 */
\$i = 0;

/*
 * First server
 */
\$i++;
/* Authentication type */
\$cfg['Servers'][\$i]['auth_type'] = 'cookie';
/* Server parameters */
\$cfg['Servers'][\$i]['host'] = 'localhost';
\$cfg['Servers'][\$i]['connect_type'] = 'tcp';
\$cfg['Servers'][\$i]['compress'] = true;
/* Select mysql if your server does not have mysqli */
\$cfg['Servers'][\$i]['extension'] = 'mysqli';
\$cfg['Servers'][\$i]['AllowNoPassword'] = false;

\$cfg['UploadDir'] = '${TMPSRV}/php/tmp';
\$cfg['SaveDir'] = '${TMPSRV}/php/tmp';

?>
EOF
    chown_as_root root root ${PREFIX}/${name}
 fi

 cd $CWD

}

# build and install awstats
build_awstats()
{
 local name="awstats"
 local version="${AWSTATS_VERSION}"
 local tarball="${name}-${version}.tar.gz"
 local dir="${name}-${version}"
 local url="${AWSTATS_URL}"
 local wwwdir=${DATA}/www
 local wwwdata=${DATA}/${name}
 local uid=$(id -u)
 local cmd=

 if [ $uid -ne 0 ]; then
    cmd="sudo"
 fi

 [ -d build ] || mkdir -p build
 cd build
 [ -d ${dir} ] && rm -fr ${dir} || :

 get_dependency ${name}

 get_pkg ${url} ${tarball}
 unpack_source ${tarball}
 chown_dir ${dir}
 cd ${dir} >/dev/null 2>&1 || { msg error "Failed to change directory."; exit 1; }

 mkdir_as_root ${PREFIX}/${name}/conf 0755
 mkdir_as_root ${PREFIX}/${name}/bin 0755
 mkdir_as_root ${wwwdir} 0755
 mkdir_as_root ${wwwdata} 0755

 $cmd cp -aRf wwwroot ${PREFIX}/${name}/
 $cmd cp -aRf tools ${PREFIX}/${name}/
 $cmd cp -aRf docs ${PREFIX}/${name}/
 chmod_as_root 0755 "${PREFIX}/${name}/wwwroot/cgi-bin/*.pl"
 chown_as_root root root ${PREFIX}/${name}
 cp_as_root wwwroot/cgi-bin/${name}.model.conf ${PREFIX}/${name}/conf/${name}.model.conf

 ( cd ${wwwdir}
   [ -L ${name} ] || ln_as_root ../..${PREFIX}/${name}/wwwroot ${name}
 )

 [ -e ${PREFIX}/${name}/wwwroot/cgi-bin/${name}.pl ] && \
 $cmd sed -i \
    -e "s|/usr/local/etc/awstats|${PREFIX}/${name}/conf|g" \
    ${PREFIX}/${name}/wwwroot/cgi-bin/${name}.pl

 if [ ! -x ${PREFIX}/${name}/bin/create-awstats-config.sh ]; then
    msg info "Copying config generator script for ${name} (create-awstats-config.sh) ..."
    cp_as_root $CWD/scripts/create-awstats-config.sh ${PREFIX}/${name}/bin/create-awstats-config.sh
    chown_as_root root root ${PREFIX}/${name}/bin/create-awstats-config.sh
    chmod_as_root 0755 ${PREFIX}/${name}/bin/create-awstats-config.sh
    [ -e ${PREFIX}/${name}/bin/create-awstats-config.sh ] && \
    $cmd sed -i \
      -e "s|@@DATA@@|${wwwdata}|g" \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      ${PREFIX}/${name}/bin/create-awstats-config.sh
 fi

 if [ ! -x ${PREFIX}/${name}/bin/update-awstats.sh ]; then
    msg info "Copying statistics generator script for ${name} (update-awstats.sh) ..."
    cp_as_root $CWD/scripts/update-awstats.sh ${PREFIX}/${name}/bin/update-awstats.sh
    chown_as_root root root ${PREFIX}/${name}/bin/update-awstats.sh
    chmod_as_root 0755 ${PREFIX}/${name}/bin/update-awstats.sh
    [ -e ${PREFIX}/${name}/bin/update-awstats.sh ] && \
    $cmd sed -i \
      -e "s|@@DATA@@|${wwwdata}|g" \
      -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
      ${PREFIX}/${name}/bin/update-awstats.sh
 fi

 [ -d /etc/profile.d ] || mkdir_as_root /etc/profile.d 0755
 if [ ! -e /etc/profile.d/${name}.sh ]; then
    msg info "Copying ${name}.sh to /etc/profile.d ... "
    cp_as_root $CWD/profile.d/${name}.sh /etc/profile.d
    chown_as_root root root /etc/profile.d/${name}.sh
    chmod_as_root 0644 /etc/profile.d/${name}.sh
    [ -e /etc/profile.d/${name}.sh ] && \
    $cmd sed -i \
       -e "s|@@PREFIX@@|${PREFIX}/${name}|g" \
       /etc/profile.d/${name}.sh >/dev/null 2>&1
 fi

 cd $CWD
}

# build and install all available packages
build_all()
{
 # check if is debian/ubuntu, if not exit,
 # we can't handle other type of distro's, yet.
 is_debian

 export buildall=1
 for name in ${PACKAGES}; do
    msg info "*** Building now package: ${name}"
    build_${name}
 done
}

# trap Ctrl+C
control_c()
{
 echo
 msg warn "Ctrl+C was pressed, we are existing ..."
 sleep 5
 exit $?
}

# check first if we have sudo, in case we run with non-root user.
is_sudo

OPT="$@"
if [ -z "${OPT}" ]; then
   usage
   msg error "no arguments supplied." 1>&2
   exit 1
fi

# set global variables before running anything.
set_global_conf

# set default gcc build flags CFLAGS/CXXFLAGS.
set_cflags

# buildpkg should be 0 where
# should be 1 in case we do build all.
buildpkg=0

trap control_c SIGINT

while [ $# -gt 0 ]; do
 case "$1" in
  --help)
    usage
    exit 0
  ;;

  --dont-trigger)
     export triggeroff=1
     shift
  ;;

  --pkg*)
     if [ "$1" != "${1##--pkg=}" ]; then
        name="${1##--pkg=}"
     else
        name=$2
        shift
     fi
     buildpkg=1
  ;;

  --all)
     msg warn "Building all available packages: $(echo ${PACKAGES} | sed 's/ /, /g')"
     msg warn "This option will build all packages and it can take up to several hours to finish depending on the speed of your computer."
     msg warn "If you are not sure what you are doing, just press now Ctrl+C to stop or Enter to continue with package build."
     read
     build_all
  ;;

  *)
    usage
    msg error "missing or wrong arguments."
    ;;
 esac
 shift
done

if [ $buildpkg -eq 1 ]; then
   if [ -z "${name}" ]; then
      usage
      msg error "missing package name."
      exit 1
   else
      pkg=$(echo ${PACKAGES} | grep -w ${name} 2>/dev/null)
      if [ -z "$pkg" ]; then
         usage
         msg error "${name} package is not available at this moment."
         exit 1
      else
         # check if is debian/ubuntu, if not exit,
         # we can't handle other type of distro's, yet.
         is_debian

         msg info "*** Building now package: ${name}"
         build_${name}
      fi
   fi
fi

exit 0
