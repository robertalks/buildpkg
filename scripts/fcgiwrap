#!/bin/sh
### BEGIN INIT INFO
# Provides:          fcgiwrap
# Required-Start:    $remote_fs nginx
# Required-Stop:     $remote_fs
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: FastCGI wrapper
# Description:       Simple server for running CGI applications over FastCGI
### END INIT INFO

prefix="@@PREFIX@@" 
PATH=${prefix}/sbin:${prefix}/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
 
SPAWN_FCGI="${prefix}/bin/spawn-fcgi"
DAEMON="${prefix}/sbin/fcgiwrap"
NAME="fcgiwrap"
DESC="FastCGI wrapper"
PIDFILE="/var/run/fcgiwrap.pid"
 
test -x $SPAWN_FCGI || exit 1
test -x $DAEMON || exit 1
 
# FCGI_APP Variables
FCGI_CHILDREN="1"
FCGI_SOCKET="@@TMPSRV@@/fcgiwrap.socket"
FCGI_USER="www"
FCGI_GROUP="www"
 
. /lib/lsb/init-functions
 
DAEMONUSER="$FCGI_USER"
 
# Check that the user exists (if we set a user)
# Does the user exist?
if [ -n "$DAEMONUSER" ] ; then
	if getent passwd | grep -q "^$DAEMONUSER:"; then
		# Obtain the uid and gid
		DAEMONUID=$(getent passwd |grep "^$DAEMONUSER:" | awk -F : '{print $3}')
		DAEMONGID=$(getent passwd |grep "^$DAEMONUSER:" | awk -F : '{print $4}')
	else
		log_failure_msg "The user $DAEMONUSER, required to run $NAME does not exist."
		exit 1
	fi
fi
 
set -e
 
running_pid() {
	# Check if a given process pid's cmdline matches a given name
	local pid=$1
	local name=$2

	if [ -z "$pid" ]; then
		return 1
	elif [ ! -d /proc/$pid ]; then
		return 1
	fi

	cmd=$(cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1)
	# Is this the expected server
	if [ "$cmd" != "$name" ]; then
		return 1
	fi

	return 0
}
 
running() {
	# Check if the process is running looking at /proc (works for all users)
	# No pidfile, probably no daemon present
	if [ ! -f "$PIDFILE" ]; then
		return 1
	fi

	local PIDS="$(cat "$PIDFILE")"
	for pid in $PIDS; do
		if [ -n "$pid" ]; then
			running_pid $pid $DAEMON && return 0 || true
		fi
	done

	return 1
}
 
start_server() {
	local ARGS="-P $PIDFILE"

	# Adjust NUMBER of processes
	if [ -n "$FCGI_CHILDREN" ]; then
		ARGS="$ARGS -F '$FCGI_CHILDREN'"
	fi

	# Adjust SOCKET or PORT and ADDR
	if [ -n "$FCGI_SOCKET" ]; then
		ARGS="$ARGS -s '$FCGI_SOCKET'"
	elif [ -n "$FCGI_PORT" ]; then
		if [ -n "$FCGI_ADDR" ]; then
			ARGS="$ARGS -a '$FCGI_ADDR'"
		fi
		ARGS="$ARGS -p '$FCGI_PORT'"
	fi

	# Adjust user
	if [ -n "$FCGI_USER" ]; then
		ARGS="$ARGS -u '$FCGI_USER'"
		if [ -n "$FCGI_SOCKET" ]; then
			ARGS="$ARGS -U '$FCGI_USER'"
		fi
	fi

	# Adjust group
	if [ -n "$FCGI_GROUP" ]; then
		ARGS="$ARGS -g '$FCGI_GROUP'"
		if [ -n "$FCGI_SOCKET" ]; then
			ARGS="$ARGS -G '$FCGI_GROUP'"
		fi
	fi

	eval $(echo $SPAWN_FCGI $ARGS $DAEMON) >/dev/null 2>&1

	return $?
}
 
stop_server() {
	# Force the process to die killing it manually
	if [ ! -e "$PIDFILE" ]; then
		return 1
	fi

	local PIDS="$(cat "$PIDFILE")"
	for pid in $PIDS; do
		if running_pid $pid $DAEMON; then
			kill -15 $pid >/dev/null 2>&1
			# Is it really dead?
			sleep 1
			if running_pid $pid $DAEMON; then
				kill -9 $pid >/dev/null 2>&1
				sleep 1
				if running_pid $pid $DAEMON; then
					log_failure_msg "Cannot kill $NAME (pid=$pid)!"
					exit 1
				fi
			fi
		fi
	done

	rm -f "$PIDFILE"
	if [ -n "$FCGI_SOCKET" ]; then
		rm -f "$FCGI_SOCKET"
	fi
}
 
case "$1" in
	start)
		log_daemon_msg "Starting $DESC" "$NAME"
		# Check if it's running first
		if running; then
			log_progress_msg "apparently already running"
			log_end_msg 0
		elif start_server; then
			# NOTE: Some servers might die some time after they start,
			# this code will detect this issue if STARTTIME is set
			# to a reasonable value
			[ -n "$STARTTIME" ] && sleep $STARTTIME # Wait some time 
			if running; then
				# It's ok, the server started and is running
				log_end_msg 0
			else
				# It is not running after we did start
				log_end_msg 1
			fi
		else
			# Either we could not start it
			log_end_msg 1
		fi
	;;

	stop|force-stop)
		log_daemon_msg "Stopping $DESC" "$NAME"
		if running; then
			# Only stop the server if we see it running
			stop_server
			log_end_msg $?
		else
			# If it's not running don't do anything
			log_progress_msg "apparently not running"
			log_end_msg 0
        	fi
	;;

	restart|force-reload)
		log_daemon_msg "Restarting $DESC" "$NAME"
		stop_server
		# Wait some sensible amount, some server need this
		sleep 1
		start_server
		sleep 1
		running
		log_end_msg $?
        ;;

	status)
 		log_daemon_msg "Checking status of $DESC" "$NAME"
		if running; then
			log_progress_msg "running"
			log_end_msg 0
		else
			log_progress_msg "apparently not running"
			log_end_msg 1
		fi
	;;

	reload)
		log_warning_msg "Reloading $NAME daemon: not implemented, as the daemon"
		log_warning_msg "cannot re-read the config file (use restart)."
	;;

	*)
		N=/etc/init.d/$NAME
		echo "Usage: $N {start|stop|force-stop|restart|force-reload|status}" >&2
		exit 1
	;;
esac
 
exit 0
